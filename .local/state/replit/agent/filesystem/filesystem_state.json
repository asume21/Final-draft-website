{"file_contents":{"DEPLOYMENT.md":{"content":"# CodedSwitch Deployment Guide\n\n## Repository: https://github.com/asume21/Final-draft-website\n\n## Quick Deployment Steps\n\n### 1. Push to New Repository\n```bash\n# Run the deployment script\n./deploy-to-new-repo.sh\n```\n\n### 2. Deploy on Render\n\n1. **Connect Repository**:\n   - Go to [render.com](https://render.com)\n   - Click \"New +\" ‚Üí \"Web Service\"\n   - Connect: `https://github.com/asume21/Final-draft-website`\n\n2. **Environment Variables** (Required):\n   ```\n   DATABASE_URL=your_neon_connection_string\n   GEMINI_API_KEY=your_gemini_api_key\n   XAI_API_KEY=your_xai_grok_api_key\n   NODE_ENV=production\n   ```\n\n3. **Automatic Configuration**:\n   - Build Command: `npm install && npm run build`\n   - Start Command: `npm start`\n   - Auto-detected from `render.yaml`\n\n### 3. Database Setup (Neon)\n\nThe app is pre-configured for Neon Database:\n- Connection pooling with `@neondatabase/serverless`\n- WebSocket support for serverless environments\n- Drizzle ORM with PostgreSQL dialect\n\n### 4. Post-Deployment\n\nAfter successful deployment:\n```bash\n# Push database schema (if needed)\nnpm run db:push\n```\n\n## Features Ready for Production\n\n‚úÖ **Code Translation**: 14+ programming languages  \n‚úÖ **Lyric Lab**: AI-powered song lyrics generation  \n‚úÖ **Beat Studio**: Professional beat creation  \n‚úÖ **CodeBeat Studio**: Code-to-music conversion  \n‚úÖ **AI Assistant**: 24/7 intelligent help  \n\n## AI Providers Configured\n\n- **xAI Grok** (Primary/Default)\n- **Google Gemini** (Secondary)\n\nBoth providers available in all components with user selection.\n\n## Architecture\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Node.js, Express, TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Audio**: Tone.js for synthesis and playback\n- **Deployment**: Render + Neon Database\n\n## Support\n\nAll components include proper error handling, loading states, and user feedback. The platform is production-ready with comprehensive documentation.","size_bytes":1965},"README.md":{"content":"# CodedSwitch - AI-Powered Code & Music Platform\n\nCodedSwitch is a revolutionary platform that bridges the gap between programming and music creation through AI-powered tools. The name represents a clever triple entendre: Code Switch (linguistic term), Coded Switch (programming toggle), and Code-Switch (fusion of coding and music).\n\n## üöÄ Features\n\n### Code Translation\n- Translate code between 14+ programming languages\n- Maintain functionality and logic structure\n- AI-powered explanations and optimizations\n\n### Lyric Lab\n- Generate creative song lyrics with AI\n- Multiple genres and moods support\n- Sentiment analysis and rhyme scheme detection\n\n### Beat Studio\n- Create professional beats with AI assistance\n- Real-time pattern editing and visualization\n- Multiple genre templates and customization\n\n### CodeBeat Studio\n- Transform code structures into musical compositions\n- Convert algorithms into rhythmic patterns\n- Revolutionary fusion of programming and music\n\n### AI Assistant\n- 24/7 intelligent help for coding and music\n- Context-aware suggestions\n- Multi-domain expertise\n\n## ü§ñ AI Providers\n\n- **xAI Grok** (Default) - Primary AI service with advanced reasoning\n- **Google Gemini** - Multimodal AI with enhanced capabilities\n\n## üõ† Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, shadcn/ui\n- **Backend**: Node.js, Express, TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Audio**: Tone.js for music synthesis and playback\n- **Deployment**: Render + Neon Database\n\n## üì¶ Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/asume21/Replit-Codedswitch-website.git\ncd Replit-Codedswitch-website\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Add your API keys: GEMINI_API_KEY, XAI_API_KEY, DATABASE_URL\n\n# Run development server\nnpm run dev\n```\n\n## üöÄ Deployment\n\n### Render + Neon Database\n\n1. Push to GitHub\n2. Connect repository to Render\n3. Set environment variables:\n   - `DATABASE_URL` (Neon connection string)\n   - `GEMINI_API_KEY`\n   - `XAI_API_KEY`\n4. Deploy using the included `render.yaml`\n\n## üîß Environment Variables\n\n```env\nDATABASE_URL=postgresql://username:password@hostname/database\nGEMINI_API_KEY=your_gemini_api_key\nXAI_API_KEY=your_xai_api_key\nNODE_ENV=production\n```\n\n## üì± Usage\n\n1. **Code Translation**: Select source/target languages, paste code, and translate\n2. **Lyric Generation**: Enter topic, choose genre/mood, generate lyrics\n3. **Beat Creation**: Select genre, adjust BPM/duration, generate beats\n4. **Code to Music**: Input code, select language, convert to musical composition\n5. **AI Assistance**: Ask questions about coding, music theory, or platform usage\n\n## üéµ Audio Features\n\n- Real-time audio synthesis with Tone.js\n- Waveform and frequency visualization\n- Beat pattern editing and playback\n- Musical composition from code structures\n\n## üîí Security\n\n- Environment variables for API keys\n- Secure database connections\n- Input validation and sanitization\n- Rate limiting on API endpoints\n\n## ü§ù Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## üìÑ License\n\nMIT License - see LICENSE file for details\n\n## üéØ Future Roadmap\n\n- Additional AI providers integration\n- Advanced music theory analysis\n- Collaborative features\n- Mobile app development\n- Enhanced audio effects and synthesis\n\n---\n\nBuilt with ‚ù§Ô∏è using Replit, deployed on Render with Neon Database","size_bytes":3493},"deploy-to-new-repo.sh":{"content":"#!/bin/bash\n\n# Deploy CodedSwitch to new repository\necho \"üöÄ Deploying CodedSwitch to Final-draft-website repository...\"\n\n# Remove existing git configuration to start fresh\nrm -rf .git\n\n# Initialize new git repository\ngit init\n\n# Add the new remote repository\ngit remote add origin https://github.com/asume21/Final-draft-website.git\n\n# Add all files to staging\ngit add .\n\n# Create comprehensive commit message\ngit commit -m \"Complete CodedSwitch AI Platform v2.0\n\nüéØ Features:\n- Code Translation (14+ languages)\n- Lyric Lab (AI-generated lyrics)  \n- Beat Studio (professional beats)\n- CodeBeat Studio (code to music)\n- AI Assistant (24/7 help)\n\nü§ñ AI Providers:\n- xAI Grok (Primary/Default)\n- Google Gemini (Secondary)\n\nüõ† Tech Stack:\n- React 18 + TypeScript + Tailwind CSS\n- Node.js + Express + Drizzle ORM\n- PostgreSQL (Neon Database)\n- Tone.js (Audio synthesis)\n\nüöÄ Deployment:\n- Configured for Render + Neon Database\n- Production-ready with render.yaml\n- Environment variables configured\n- Complete documentation included\n\nReady for immediate deployment!\"\n\n# Push to the new repository\ngit push -u origin main\n\necho \"‚úÖ Successfully deployed to Final-draft-website repository!\"\necho \"üåê Repository: https://github.com/asume21/Final-draft-website\"\necho \"üöÄ Ready for Render deployment with Neon Database!\"","size_bytes":1323},"deployment-fix-instructions.md":{"content":"# CodedSwitch Deployment Fix\n\n## The Problem\nRender is looking for package.json in `/opt/render/project/src/package.json` but it should be in the root directory.\n\n## Quick Fix Options\n\n### Option 1: Check Repository Structure\n1. Go to: https://github.com/asume21/Final-draft-website\n2. Verify that `package.json` is visible in the root directory (not inside any folders)\n3. If files are nested in a folder, this is the problem\n\n### Option 2: Manual Render Configuration\n1. In Render dashboard, go to your service settings\n2. Set \"Root Directory\" to the correct path where package.json exists\n3. Or set it to empty/blank if package.json is in root\n\n### Option 3: Re-upload Project Structure\nIf files were uploaded incorrectly nested:\n1. Download the `codeswitch-complete.tar.gz` from Replit again\n2. Extract it locally to verify structure\n3. Upload individual files to GitHub root directory\n\n## Correct Structure Should Be:\n```\nFinal-draft-website/\n‚îú‚îÄ‚îÄ package.json (ROOT LEVEL)\n‚îú‚îÄ‚îÄ client/\n‚îú‚îÄ‚îÄ server/\n‚îú‚îÄ‚îÄ shared/\n‚îú‚îÄ‚îÄ README.md\n‚îî‚îÄ‚îÄ other files...\n```\n\n## Not This:\n```\nFinal-draft-website/\n‚îî‚îÄ‚îÄ some-folder/\n    ‚îú‚îÄ‚îÄ package.json (NESTED - WRONG)\n    ‚îú‚îÄ‚îÄ client/\n    ‚îî‚îÄ‚îÄ server/\n```","size_bytes":1240},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render-deployment-fix.md":{"content":"# URGENT: Grok Default Settings - Deployment Fix\n\n## Issue\nGrok IS set as default in the code, but deployment path issues prevent the updated code from going live.\n\n## Current Code Status ‚úÖ\n- Code Translator: `setAiProvider(\"grok\")` - Line 25\n- Lyric Lab: `setAiProvider(\"grok\")` - Line 34  \n- Beat Studio: `setAiProvider(\"grok\")` - Line 36\n- Server Routes: `default(\"grok\")` - Line 91\n- All AI provider selectors include Grok option\n\n## Deployment Problem\nRepository structure: `GitBridge (1)/GitBridge/` contains the real code\nRender expects: Root directory\n\n## Quick Fix for Render\nUpdate your Render service build commands:\n\n**Build Command:**\n```\ncd \"GitBridge (1)/GitBridge\" && npm install && npm run build\n```\n\n**Start Command:**\n```\ncd \"GitBridge (1)/GitBridge\" && npm start\n```\n\nThis will deploy your actual code with Grok as the default AI provider across all 5 tools.","size_bytes":880},"render-fixed.yaml":{"content":"services:\n  - type: web\n    name: codeswitch\n    env: node\n    plan: starter\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        sync: false\n      - key: GEMINI_API_KEY\n        sync: false\n      - key: XAI_API_KEY\n        sync: false\n\ndatabases:\n  - name: codeswitch-db\n    databaseName: codeswitch\n    user: codeswitch_user\n    plan: starter","size_bytes":460},"render.yaml":{"content":"services:\n  - type: web\n    name: codeswitch\n    env: node\n    plan: starter\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        sync: false\n      - key: GEMINI_API_KEY\n        sync: false\n      - key: XAI_API_KEY\n        sync: false","size_bytes":351},"replit.md":{"content":"# Overview\n\nCodedSwitch is a creative platform that bridges the gap between programming and music creation through AI-powered tools. The application combines code translation capabilities with music generation features, allowing users to translate code between programming languages, generate lyrics and beats, and even convert code structures into musical patterns. Built as a full-stack web application, it features a modern React frontend with a Node.js/Express backend, utilizing Google Gemini and xAI Grok AI services for intelligent code and music generation.\n\n## Recent Changes (January 2025)\n- **Removed OpenAI completely** from the entire platform\n- **Added xAI Grok integration** as the primary AI provider\n- **Set Grok as default** across all platform features (CONFIRMED: Grok is default in all components)\n- **Added AI provider selectors** to all components (Lyric Lab, Beat Studio, CodeBeat Studio, AI Assistant)\n- **Configured for Render deployment** with Neon Database integration\n- **Updated all API endpoints** to support only Gemini and Grok providers\n- **Deployment Issue**: Repository structure has nested folders causing build failures on Render\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client uses React with TypeScript in a single-page application structure. The UI is built with shadcn/ui components for consistent design and Radix UI primitives for accessibility. Styling is handled through Tailwind CSS with a custom dark theme optimized for coding environments. The application uses Wouter for lightweight client-side routing and TanStack Query for server state management and API caching.\n\n## Backend Architecture\nThe server follows a REST API pattern built with Express.js and TypeScript. Routes are modularized through a registration system that handles different feature areas (code translation, music generation, user management). The application uses a middleware-based approach for request logging, error handling, and JSON processing. Development includes Vite integration for hot module replacement and development tooling.\n\n## Data Storage Solutions\nThe application implements a dual storage approach. For development and testing, it uses an in-memory storage system with Map-based data structures. For production, it's configured to use PostgreSQL through Drizzle ORM with Neon Database as the serverless database provider. The schema includes tables for users, projects, code translations, and music generations with proper foreign key relationships.\n\n## Authentication and Authorization\nThe current implementation uses a basic storage pattern without explicit authentication middleware. The system tracks users through ID-based associations but doesn't implement session management or access control at the API level. User identification is handled through optional userId parameters in API requests.\n\n## External Dependencies\n\n### AI Services\n- **xAI Grok**: Primary AI service for code translation, lyric generation, music analysis, and intelligent assistance (default provider)\n- **Google Gemini**: Secondary AI service with multimodal capabilities for enhanced code and music generation\n- **Code Translation**: Converts code between programming languages while maintaining functionality\n- **Music Generation**: Creates lyrics with mood/genre specifications and generates beat patterns\n- **AI Assistant**: Provides coding help and music theory guidance\n- **Provider Selection**: Users can choose between Grok and Gemini for each feature independently\n\n### Database and Storage\n- **Neon Database**: Serverless PostgreSQL database for production data storage\n- **Drizzle ORM**: Type-safe database ORM with schema management and migrations\n- **connect-pg-simple**: PostgreSQL session store for potential future session management\n\n### Audio and Music\n- **Tone.js**: Web Audio API framework for audio synthesis, playback, and music creation\n- **Audio Visualization**: Custom components for waveform and frequency visualization\n- **Real-time Audio**: Support for beat generation, melody playback, and audio effects\n\n### Development and Build Tools\n- **Vite**: Fast build tool with HMR and development server integration\n- **TypeScript**: Type safety across frontend, backend, and shared code\n- **ESBuild**: Fast bundling for production server builds\n- **Replit Integration**: Development environment with cartographer and error modal plugins\n\n### UI and User Experience\n- **shadcn/ui**: Complete component library built on Radix UI primitives\n- **Tailwind CSS**: Utility-first styling with custom design tokens\n- **Lucide React**: Consistent icon system throughout the application\n- **React Hook Form**: Form handling with Zod validation schemas","size_bytes":4775},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"updated-render.yaml":{"content":"services:\n  - type: web\n    name: codeswitch\n    env: node\n    plan: starter\n    rootDir: .\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        sync: false\n      - key: GEMINI_API_KEY\n        sync: false\n      - key: XAI_API_KEY\n        sync: false\n\ndatabases:\n  - name: codeswitch-db\n    databaseName: codeswitch\n    user: codeswitch_user\n    plan: starter","size_bytes":475},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1754200946238.md":{"content":"[Skip to content](https://github.com/asume21/Codedswitch-minimal#start-of-content)\n\n[asume21](https://github.com/asume21)/ **[Codedswitch-minimal](https://github.com/asume21/Codedswitch-minimal)** Public\n\n- [Notifications](https://github.com/login?return_to=%2Fasume21%2FCodedswitch-minimal) You must be signed in to change notification settings\n- [Fork\\\\\n0](https://github.com/login?return_to=%2Fasume21%2FCodedswitch-minimal)\n- [Star\\\\\n0](https://github.com/login?return_to=%2Fasume21%2FCodedswitch-minimal)\n\n\n[0\\\\\nstars](https://github.com/asume21/Codedswitch-minimal/stargazers) [0\\\\\nforks](https://github.com/asume21/Codedswitch-minimal/forks) [Branches](https://github.com/asume21/Codedswitch-minimal/branches) [Tags](https://github.com/asume21/Codedswitch-minimal/tags) [Activity](https://github.com/asume21/Codedswitch-minimal/activity)\n\n[Star](https://github.com/login?return_to=%2Fasume21%2FCodedswitch-minimal)\n\n[Notifications](https://github.com/login?return_to=%2Fasume21%2FCodedswitch-minimal) You must be signed in to change notification settings\n\n# asume21/Codedswitch-minimal\n\nmain\n\n[**1** Branch](https://github.com/asume21/Codedswitch-minimal/branches) [**0** Tags](https://github.com/asume21/Codedswitch-minimal/tags)\n\n[Go to Branches page](https://github.com/asume21/Codedswitch-minimal/branches)[Go to Tags page](https://github.com/asume21/Codedswitch-minimal/tags)\n\nGo to file\n\nCode\n\nOpen more actions menu\n\n## Folders and files\n\n| Name | Name | Last commit message | Last commit date |\n| --- | --- | --- | --- |\n| ## Latest commit<br>[![asume21](https://avatars.githubusercontent.com/u/62077744?v=4&size=40)](https://github.com/asume21)[asume21](https://github.com/asume21/Codedswitch-minimal/commits?author=asume21)<br>[CodedSwitch Platform Enhancements](https://github.com/asume21/Codedswitch-minimal/commit/ea5a65d5646a893788689ff3e9e884f5efdf5917)<br>failure<br>Aug 3, 2025<br>[ea5a65d](https://github.com/asume21/Codedswitch-minimal/commit/ea5a65d5646a893788689ff3e9e884f5efdf5917)¬†¬∑¬†Aug 3, 2025<br>## History<br>[137 Commits](https://github.com/asume21/Codedswitch-minimal/commits/main/) <br>Open commit details<br>[View commit history for this file.](https://github.com/asume21/Codedswitch-minimal/commits/main/) |\n| [.github](https://github.com/asume21/Codedswitch-minimal/tree/main/.github \".github\") | [.github](https://github.com/asume21/Codedswitch-minimal/tree/main/.github \".github\") | [FINAL FIX: Remove unused MelodyGenerator import causing build issues](https://github.com/asume21/Codedswitch-minimal/commit/25041dcc6f963fdeb6ab66886fc33a85d470389c \"FINAL FIX: Remove unused MelodyGenerator import causing build issues\") | Jul 24, 2025 |\n| [CodeHarmony](https://github.com/asume21/Codedswitch-minimal/tree/main/CodeHarmony \"CodeHarmony\") | [CodeHarmony](https://github.com/asume21/Codedswitch-minimal/tree/main/CodeHarmony \"CodeHarmony\") | [FINAL FIX: Remove unused MelodyGenerator import causing build issues](https://github.com/asume21/Codedswitch-minimal/commit/25041dcc6f963fdeb6ab66886fc33a85d470389c \"FINAL FIX: Remove unused MelodyGenerator import causing build issues\") | Jul 24, 2025 |\n| [backend](https://github.com/asume21/Codedswitch-minimal/tree/main/backend \"backend\") | [backend](https://github.com/asume21/Codedswitch-minimal/tree/main/backend \"backend\") | [CodedSwitch Platform Enhancements](https://github.com/asume21/Codedswitch-minimal/commit/ea5a65d5646a893788689ff3e9e884f5efdf5917 \"CodedSwitch Platform Enhancements\") | Aug 3, 2025 |\n| [docs](https://github.com/asume21/Codedswitch-minimal/tree/main/docs \"docs\") | [docs](https://github.com/asume21/Codedswitch-minimal/tree/main/docs \"docs\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [frontend](https://github.com/asume21/Codedswitch-minimal/tree/main/frontend \"frontend\") | [frontend](https://github.com/asume21/Codedswitch-minimal/tree/main/frontend \"frontend\") | [CodedSwitch Platform Enhancements](https://github.com/asume21/Codedswitch-minimal/commit/ea5a65d5646a893788689ff3e9e884f5efdf5917 \"CodedSwitch Platform Enhancements\") | Aug 3, 2025 |\n| [scripts](https://github.com/asume21/Codedswitch-minimal/tree/main/scripts \"scripts\") | [scripts](https://github.com/asume21/Codedswitch-minimal/tree/main/scripts \"scripts\") | [fix: Add react-toastify dependency and update BeatStudio component](https://github.com/asume21/Codedswitch-minimal/commit/0692157ae8ed9ca34f2d9583f87e746cd3eb4a5a \"fix: Add react-toastify dependency and update BeatStudio component\") | Aug 1, 2025 |\n| [.dockerignore](https://github.com/asume21/Codedswitch-minimal/blob/main/.dockerignore \".dockerignore\") | [.dockerignore](https://github.com/asume21/Codedswitch-minimal/blob/main/.dockerignore \".dockerignore\") | [fix: Add react-toastify dependency and update BeatStudio component](https://github.com/asume21/Codedswitch-minimal/commit/0692157ae8ed9ca34f2d9583f87e746cd3eb4a5a \"fix: Add react-toastify dependency and update BeatStudio component\") | Aug 1, 2025 |\n| [.env.example](https://github.com/asume21/Codedswitch-minimal/blob/main/.env.example \".env.example\") | [.env.example](https://github.com/asume21/Codedswitch-minimal/blob/main/.env.example \".env.example\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [.gitignore](https://github.com/asume21/Codedswitch-minimal/blob/main/.gitignore \".gitignore\") | [.gitignore](https://github.com/asume21/Codedswitch-minimal/blob/main/.gitignore \".gitignore\") | [Revert to audiocraft - will use Dockerfile for dependencies](https://github.com/asume21/Codedswitch-minimal/commit/3456bec3c857bb030206dbfef3034f008eb9fec9 \"Revert to audiocraft - will use Dockerfile for dependencies\") | Jul 19, 2025 |\n| [FINAL\\_STATUS.md](https://github.com/asume21/Codedswitch-minimal/blob/main/FINAL_STATUS.md \"FINAL_STATUS.md\") | [FINAL\\_STATUS.md](https://github.com/asume21/Codedswitch-minimal/blob/main/FINAL_STATUS.md \"FINAL_STATUS.md\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [MUSIC\\_WORKER.md](https://github.com/asume21/Codedswitch-minimal/blob/main/MUSIC_WORKER.md \"MUSIC_WORKER.md\") | [MUSIC\\_WORKER.md](https://github.com/asume21/Codedswitch-minimal/blob/main/MUSIC_WORKER.md \"MUSIC_WORKER.md\") | [fix: Add react-toastify dependency and update BeatStudio component](https://github.com/asume21/Codedswitch-minimal/commit/0692157ae8ed9ca34f2d9583f87e746cd3eb4a5a \"fix: Add react-toastify dependency and update BeatStudio component\") | Aug 1, 2025 |\n| [README.md](https://github.com/asume21/Codedswitch-minimal/blob/main/README.md \"README.md\") | [README.md](https://github.com/asume21/Codedswitch-minimal/blob/main/README.md \"README.md\") | [CodedSwitch Platform Enhancements](https://github.com/asume21/Codedswitch-minimal/commit/ea5a65d5646a893788689ff3e9e884f5efdf5917 \"CodedSwitch Platform Enhancements\") | Aug 3, 2025 |\n| [SOCIAL\\_MEDIA\\_CONTENT.md](https://github.com/asume21/Codedswitch-minimal/blob/main/SOCIAL_MEDIA_CONTENT.md \"SOCIAL_MEDIA_CONTENT.md\") | [SOCIAL\\_MEDIA\\_CONTENT.md](https://github.com/asume21/Codedswitch-minimal/blob/main/SOCIAL_MEDIA_CONTENT.md \"SOCIAL_MEDIA_CONTENT.md\") | [feat: Add worker deployment solution with Docker and documentation](https://github.com/asume21/Codedswitch-minimal/commit/4d05a49c32038ae6f688f416b8463b9053c64070 \"feat: Add worker deployment solution with Docker and documentation  - Added Dockerfile.worker with all required system dependencies - Created deployment script for Render - Added comprehensive deployment documentation - Fixed line endings in files\") | Jul 21, 2025 |\n| [STRIPE\\_SETUP\\_GUIDE.md](https://github.com/asume21/Codedswitch-minimal/blob/main/STRIPE_SETUP_GUIDE.md \"STRIPE_SETUP_GUIDE.md\") | [STRIPE\\_SETUP\\_GUIDE.md](https://github.com/asume21/Codedswitch-minimal/blob/main/STRIPE_SETUP_GUIDE.md \"STRIPE_SETUP_GUIDE.md\") | [Fix API endpoints for all components](https://github.com/asume21/Codedswitch-minimal/commit/0bc02ce044cd36f0dde764bee467fa5b79f3e9c0 \"Fix API endpoints for all components\") | Jul 20, 2025 |\n| [SYSTEM\\_READY.md](https://github.com/asume21/Codedswitch-minimal/blob/main/SYSTEM_READY.md \"SYSTEM_READY.md\") | [SYSTEM\\_READY.md](https://github.com/asume21/Codedswitch-minimal/blob/main/SYSTEM_READY.md \"SYSTEM_READY.md\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [SYSTEM\\_STATUS.md](https://github.com/asume21/Codedswitch-minimal/blob/main/SYSTEM_STATUS.md \"SYSTEM_STATUS.md\") | [SYSTEM\\_STATUS.md](https://github.com/asume21/Codedswitch-minimal/blob/main/SYSTEM_STATUS.md \"SYSTEM_STATUS.md\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [TESRT-GOD-KEY.PY](https://github.com/asume21/Codedswitch-minimal/blob/main/TESRT-GOD-KEY.PY \"TESRT-GOD-KEY.PY\") | [TESRT-GOD-KEY.PY](https://github.com/asume21/Codedswitch-minimal/blob/main/TESRT-GOD-KEY.PY \"TESRT-GOD-KEY.PY\") | [Update frontend configuration and add God Mode key test script](https://github.com/asume21/Codedswitch-minimal/commit/ba5300eef7c9000e33f6b0a8a4d42980d1e1f58d \"Update frontend configuration and add God Mode key test script\") | Jul 21, 2025 |\n| [WEBSITE\\_COPY\\_UPDATES.md](https://github.com/asume21/Codedswitch-minimal/blob/main/WEBSITE_COPY_UPDATES.md \"WEBSITE_COPY_UPDATES.md\") | [WEBSITE\\_COPY\\_UPDATES.md](https://github.com/asume21/Codedswitch-minimal/blob/main/WEBSITE_COPY_UPDATES.md \"WEBSITE_COPY_UPDATES.md\") | [Fix API endpoints for all components](https://github.com/asume21/Codedswitch-minimal/commit/0bc02ce044cd36f0dde764bee467fa5b79f3e9c0 \"Fix API endpoints for all components\") | Jul 20, 2025 |\n| [WORKER\\_DEPLOYMENT.md](https://github.com/asume21/Codedswitch-minimal/blob/main/WORKER_DEPLOYMENT.md \"WORKER_DEPLOYMENT.md\") | [WORKER\\_DEPLOYMENT.md](https://github.com/asume21/Codedswitch-minimal/blob/main/WORKER_DEPLOYMENT.md \"WORKER_DEPLOYMENT.md\") | [feat: Add worker deployment solution with Docker and documentation](https://github.com/asume21/Codedswitch-minimal/commit/4d05a49c32038ae6f688f416b8463b9053c64070 \"feat: Add worker deployment solution with Docker and documentation  - Added Dockerfile.worker with all required system dependencies - Created deployment script for Render - Added comprehensive deployment documentation - Fixed line endings in files\") | Jul 21, 2025 |\n| [api\\_keys.json](https://github.com/asume21/Codedswitch-minimal/blob/main/api_keys.json \"api_keys.json\") | [api\\_keys.json](https://github.com/asume21/Codedswitch-minimal/blob/main/api_keys.json \"api_keys.json\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [debug\\_api.py](https://github.com/asume21/Codedswitch-minimal/blob/main/debug_api.py \"debug_api.py\") | [debug\\_api.py](https://github.com/asume21/Codedswitch-minimal/blob/main/debug_api.py \"debug_api.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [deploy.sh](https://github.com/asume21/Codedswitch-minimal/blob/main/deploy.sh \"deploy.sh\") | [deploy.sh](https://github.com/asume21/Codedswitch-minimal/blob/main/deploy.sh \"deploy.sh\") | [Fix frontend build and routing issues](https://github.com/asume21/Codedswitch-minimal/commit/17b6508b69ee5ea848157530f1971e87b5004f06 \"Fix frontend build and routing issues\") | Jul 21, 2025 |\n| [deploy\\_worker.sh](https://github.com/asume21/Codedswitch-minimal/blob/main/deploy_worker.sh \"deploy_worker.sh\") | [deploy\\_worker.sh](https://github.com/asume21/Codedswitch-minimal/blob/main/deploy_worker.sh \"deploy_worker.sh\") | [feat: Add worker deployment solution with Docker and documentation](https://github.com/asume21/Codedswitch-minimal/commit/4d05a49c32038ae6f688f416b8463b9053c64070 \"feat: Add worker deployment solution with Docker and documentation  - Added Dockerfile.worker with all required system dependencies - Created deployment script for Render - Added comprehensive deployment documentation - Fixed line endings in files\") | Jul 21, 2025 |\n| [docker-compose.yml](https://github.com/asume21/Codedswitch-minimal/blob/main/docker-compose.yml \"docker-compose.yml\") | [docker-compose.yml](https://github.com/asume21/Codedswitch-minimal/blob/main/docker-compose.yml \"docker-compose.yml\") | [fix: Add react-toastify dependency and update BeatStudio component](https://github.com/asume21/Codedswitch-minimal/commit/0692157ae8ed9ca34f2d9583f87e746cd3eb4a5a \"fix: Add react-toastify dependency and update BeatStudio component\") | Aug 1, 2025 |\n| [fix\\_es\\_modules.js](https://github.com/asume21/Codedswitch-minimal/blob/main/fix_es_modules.js \"fix_es_modules.js\") | [fix\\_es\\_modules.js](https://github.com/asume21/Codedswitch-minimal/blob/main/fix_es_modules.js \"fix_es_modules.js\") | [FINAL FIX: Remove unused MelodyGenerator import causing build issues](https://github.com/asume21/Codedswitch-minimal/commit/25041dcc6f963fdeb6ab66886fc33a85d470389c \"FINAL FIX: Remove unused MelodyGenerator import causing build issues\") | Jul 24, 2025 |\n| [render-worker.yaml](https://github.com/asume21/Codedswitch-minimal/blob/main/render-worker.yaml \"render-worker.yaml\") | [render-worker.yaml](https://github.com/asume21/Codedswitch-minimal/blob/main/render-worker.yaml \"render-worker.yaml\") | [fix: Add react-toastify dependency and update BeatStudio component](https://github.com/asume21/Codedswitch-minimal/commit/0692157ae8ed9ca34f2d9583f87e746cd3eb4a5a \"fix: Add react-toastify dependency and update BeatStudio component\") | Aug 1, 2025 |\n| [render.yaml](https://github.com/asume21/Codedswitch-minimal/blob/main/render.yaml \"render.yaml\") | [render.yaml](https://github.com/asume21/Codedswitch-minimal/blob/main/render.yaml \"render.yaml\") | [fix: Update build command in render.yaml to ensure proper dependency ‚Ä¶](https://github.com/asume21/Codedswitch-minimal/commit/dfc34287c6eab5ee92b0e029f68e6e391fa72707 \"fix: Update build command in render.yaml to ensure proper dependency installation\") | Aug 1, 2025 |\n| [requirements.txt](https://github.com/asume21/Codedswitch-minimal/blob/main/requirements.txt \"requirements.txt\") | [requirements.txt](https://github.com/asume21/Codedswitch-minimal/blob/main/requirements.txt \"requirements.txt\") | [Fix Docker build: Add Git and audio dependencies, use PyPI audiocraft](https://github.com/asume21/Codedswitch-minimal/commit/7076d890215309f0279d42d29c9753aa48204fb7 \"Fix Docker build: Add Git and audio dependencies, use PyPI audiocraft\") | Jul 21, 2025 |\n| [start\\_system.bat](https://github.com/asume21/Codedswitch-minimal/blob/main/start_system.bat \"start_system.bat\") | [start\\_system.bat](https://github.com/asume21/Codedswitch-minimal/blob/main/start_system.bat \"start_system.bat\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_api.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_api.py \"test_api.py\") | [test\\_api.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_api.py \"test_api.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_correct\\_key.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_correct_key.py \"test_correct_key.py\") | [test\\_correct\\_key.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_correct_key.py \"test_correct_key.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_env.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_env.py \"test_env.py\") | [test\\_env.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_env.py \"test_env.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_gemini.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_gemini.py \"test_gemini.py\") | [test\\_gemini.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_gemini.py \"test_gemini.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_gemini\\_direct.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_gemini_direct.py \"test_gemini_direct.py\") | [test\\_gemini\\_direct.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_gemini_direct.py \"test_gemini_direct.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_gemini\\_with\\_key.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_gemini_with_key.py \"test_gemini_with_key.py\") | [test\\_gemini\\_with\\_key.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_gemini_with_key.py \"test_gemini_with_key.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| [test\\_god\\_key.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_god_key.py \"test_god_key.py\") | [test\\_god\\_key.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_god_key.py \"test_god_key.py\") | [Fix API endpoints for all components](https://github.com/asume21/Codedswitch-minimal/commit/0bc02ce044cd36f0dde764bee467fa5b79f3e9c0 \"Fix API endpoints for all components\") | Jul 20, 2025 |\n| [test\\_key\\_validation.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_key_validation.py \"test_key_validation.py\") | [test\\_key\\_validation.py](https://github.com/asume21/Codedswitch-minimal/blob/main/test_key_validation.py \"test_key_validation.py\") | [feat: re-enable Gemini AI with proper code-splitting and fix build](https://github.com/asume21/Codedswitch-minimal/commit/8a69f7e187797990aa328f0d7f65e7b86dedb111 \"feat: re-enable Gemini AI with proper code-splitting and fix build  - Add terser as devDependency - Re-enable GeminiAITools with React.lazy and Suspense - Add proper route for /gemini-ai - Create frontend .env.local with API base URL - Update navigation to include Gemini AI button\") | Jul 28, 2025 |\n| View all files |\n\n## Repository files navigation\n\n# CodedSwitch üéµüíª\n\n[Permalink: CodedSwitch üéµüíª](https://github.com/asume21/Codedswitch-minimal#codedswitch-)\n\n[![Live Demo](https://camo.githubusercontent.com/45b24c1c832359976915b9fa6857a7762569f48f647427d710ac3ddb9b8c7df6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6976652d44656d6f2d627269676874677265656e3f7374796c653d666f722d7468652d6261646765266c6f676f3d72656e646572)](https://www.codedswitch.com/)[![GitHub License](https://camo.githubusercontent.com/e1b5373a456f2269d9409779f4f19713ec562e1214dcfb77cb97052aeeac26e4/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6173756d6532312f436f6465647377697463682d6d696e696d616c3f7374796c653d666f722d7468652d6261646765)](https://github.com/asume21/Codedswitch-minimal/blob/main/LICENSE)\n\n**The world's first AI-powered coding rapper platform that bridges technology and music creation.**\n\n[![CodedSwitch Banner](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/banner.png)](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/banner.png)\n\n## üöÄ Overview\n\n[Permalink: üöÄ Overview](https://github.com/asume21/Codedswitch-minimal#-overview)\n\nCodedSwitch is a revolutionary platform that combines AI-powered coding tools with music creation capabilities. It allows developers and musicians to collaborate, create, and innovate in ways never before possible.\n\n## ‚ú® Key Features\n\n[Permalink: ‚ú® Key Features](https://github.com/asume21/Codedswitch-minimal#-key-features)\n\n### AI-Powered Tools\n\n[Permalink: AI-Powered Tools](https://github.com/asume21/Codedswitch-minimal#ai-powered-tools)\n\n- **Code Translator** \\- Translate code between multiple programming languages\n- **Lyric Analyzer** \\- Advanced analysis of lyrics including rhyme schemes, sentiment, and themes\n- **Vulnerability Scanner** \\- Detect security issues in your codebase\n- **AI Assistant** \\- Get coding help and answers to technical questions\n\n### Music Creation Studio\n\n[Permalink: Music Creation Studio](https://github.com/asume21/Codedswitch-minimal#music-creation-studio)\n\n- **Lyric Lab** \\- Generate creative song lyrics with AI\n- **Beat Studio** \\- Create and edit musical beats\n- **Music Studio** \\- Compose full songs with AI assistance\n- **CodeBeat Studio** \\- Turn your code into music\n\n### Collaboration Features\n\n[Permalink: Collaboration Features](https://github.com/asume21/Codedswitch-minimal#collaboration-features)\n\n- **Real-time Collaboration** \\- Work together on music projects in real-time\n- **Performance Monitoring** \\- Track system performance and optimize workflows\n- **Advanced Analytics** \\- Deep insights into your creative process\n\n### Professional Infrastructure\n\n[Permalink: Professional Infrastructure](https://github.com/asume21/Codedswitch-minimal#professional-infrastructure)\n\n- **API Key Management** \\- Secure authentication with regular and God Mode keys\n- **Subscription System** \\- Stripe integration for payments\n- **Email System** \\- Professional email communications\n- **Diagnostics** \\- System health monitoring\n- **Performance Analytics** \\- Real-time performance tracking and optimization\n\n## üõ†Ô∏è Tech Stack\n\n[Permalink: üõ†Ô∏è Tech Stack](https://github.com/asume21/Codedswitch-minimal#%EF%B8%8F-tech-stack)\n\n### Frontend\n\n[Permalink: Frontend](https://github.com/asume21/Codedswitch-minimal#frontend)\n\n- React 18 with Hooks\n- Vite.js build system\n- TailwindCSS for styling\n- Tone.js for audio processing\n- React Router for navigation\n- Advanced audio engine with real-time processing\n- Performance monitoring and analytics\n\n### Backend\n\n[Permalink: Backend](https://github.com/asume21/Codedswitch-minimal#backend)\n\n- Flask web framework\n- Flask-CORS for cross-origin requests\n- Docker containerization\n- Grok AI API integration\n- Redis for task queueing\n- RQ (Redis Queue) for background tasks\n- Flask-Mail for email system\n- Stripe API for payments\n- Advanced lyric analysis engine\n- Performance monitoring and metrics collection\n\n## üöÄ Getting Started\n\n[Permalink: üöÄ Getting Started](https://github.com/asume21/Codedswitch-minimal#-getting-started)\n\n### Prerequisites\n\n[Permalink: Prerequisites](https://github.com/asume21/Codedswitch-minimal#prerequisites)\n\n- Docker and Docker Compose\n- Node.js 16+ (for local development)\n- Python 3.10+\n- Grok API key (for AI features)\n\n### Local Development\n\n[Permalink: Local Development](https://github.com/asume21/Codedswitch-minimal#local-development)\n\n1. **Clone the repository:**\n\n\n\n```\ngit clone https://github.com/asume21/Codedswitch-minimal.git\ncd Codedswitch-minimal\n```\n\n2. **Set up environment variables:**\n\n\n\n```\ncp frontend/.env.example frontend/.env\ncp backend/.env.example backend/.env\n```\n\n3. **Update the environment variables** in both `.env` files:\n   - Set `VITE_BACKEND_URL` in frontend/.env\n   - Add your `GROK_API_KEY` in backend/.env\n   - Configure `STRIPE_SECRET_KEY` if using payment features\n4. **Start the application** using Docker Compose:\n\n\n\n```\ndocker-compose up --build\n```\n\n5. **Access the application** at:\n   - üåê **Frontend:** [http://localhost:3000](http://localhost:3000/)\n   - üîå **Backend API:** [http://localhost:10000](http://localhost:10000/)\n   - üìä **Redis:** localhost:6379\n\n## üå©Ô∏è Production Deployment\n\n[Permalink: üå©Ô∏è Production Deployment](https://github.com/asume21/Codedswitch-minimal#%EF%B8%8F-production-deployment)\n\n### Render.com Deployment\n\n[Permalink: Render.com Deployment](https://github.com/asume21/Codedswitch-minimal#rendercom-deployment)\n\nCodedSwitch is designed for seamless deployment on Render.com with three separate services:\n\n#### 1\\. Frontend Service (Static Site)\n\n[Permalink: 1. Frontend Service (Static Site)](https://github.com/asume21/Codedswitch-minimal#1-frontend-service-static-site)\n\n- **Root Directory**: `frontend`\n- **Build Command**: `npm install && npm run build`\n- **Publish Directory**: `dist`\n- **Environment Variables**:\n\n\n\n```\nVITE_BACKEND_URL=https://your-backend-url.onrender.com\nVITE_API_URL=https://your-backend-url.onrender.com\nVITE_AI_URL=https://your-backend-url.onrender.com/api/ai\n\n```\n\n\n#### 2\\. Backend Service (Web Service)\n\n[Permalink: 2. Backend Service (Web Service)](https://github.com/asume21/Codedswitch-minimal#2-backend-service-web-service)\n\n- **Root Directory**: `.` (project root)\n- **Docker File**: `backend/Dockerfile.backend`\n- **Health Check Path**: `/api/health`\n- **Environment Variables**:\n\n\n\n```\nFLASK_ENV=production\nSECRET_KEY=your-secret-key\nGROK_API_KEY=your-grok-api-key\nDATABASE_URL=postgresql://user:password@host:port/database\nSTRIPE_SECRET_KEY=your-stripe-secret-key\nSTRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret\nMAIL_SERVER=your-smtp-server\nMAIL_PORT=587\nMAIL_USE_TLS=true\nMAIL_USERNAME=your-email@example.com\nMAIL_PASSWORD=your-email-password\nREDIS_URL=redis://redis:6379/0\nRQ_REDIS_URL=redis://redis:6379/0\n\n```\n\n\n#### 3\\. Worker Service (Background Tasks)\n\n[Permalink: 3. Worker Service (Background Tasks)](https://github.com/asume21/Codedswitch-minimal#3-worker-service-background-tasks)\n\n- **Root Directory**: `.` (project root)\n- **Docker File**: `backend/Dockerfile.worker`\n- **Environment Variables**: Same as backend service\n\n## üì∏ Screenshots\n\n[Permalink: üì∏ Screenshots](https://github.com/asume21/Codedswitch-minimal#-screenshots)\n\n### Code Translator\n\n[Permalink: Code Translator](https://github.com/asume21/Codedswitch-minimal#code-translator)\n\n[![Code Translator](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/screenshots/code-translator.png)](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/screenshots/code-translator.png)\n\n### Music Studio\n\n[Permalink: Music Studio](https://github.com/asume21/Codedswitch-minimal#music-studio)\n\n[![Music Studio](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/screenshots/music-studio.png)](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/screenshots/music-studio.png)\n\n### Beat Studio\n\n[Permalink: Beat Studio](https://github.com/asume21/Codedswitch-minimal#beat-studio)\n\n[![Beat Studio](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/screenshots/beat-studio.png)](https://raw.githubusercontent.com/asume21/Codedswitch-minimal/main/frontend/public/images/screenshots/beat-studio.png)\n\n## üìÅ Project Structure\n\n[Permalink: üìÅ Project Structure](https://github.com/asume21/Codedswitch-minimal#-project-structure)\n\n```\n.\n‚îú‚îÄ‚îÄ backend/                      # Backend API (Flask)\n‚îÇ   ‚îú‚îÄ‚îÄ assets/                   # Static assets\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile.backend        # Backend service Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile.worker         # Worker service Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt          # Python dependencies\n‚îÇ   ‚îú‚îÄ‚îÄ templates/                # Email templates\n‚îÇ   ‚îî‚îÄ‚îÄ web_backend.py           # Main Flask application\n‚îú‚îÄ‚îÄ frontend/                    # Frontend (React/Vite)\n‚îÇ   ‚îú‚îÄ‚îÄ public/                   # Static public files\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ images/              # App images\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sounds/              # Audio files\n‚îÇ   ‚îú‚îÄ‚îÄ src/                      # React source code\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/          # Reusable UI components\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CodeTranslator/  # Code translation component\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LyricLab/        # Lyric generation component\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MusicStudio/     # Music creation component\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.jsx              # Main application component\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.jsx             # Application entry point\n‚îÇ   ‚îú‚îÄ‚îÄ .env                      # Environment variables\n‚îÇ   ‚îú‚îÄ‚îÄ index.html               # HTML template\n‚îÇ   ‚îú‚îÄ‚îÄ package.json             # NPM dependencies\n‚îÇ   ‚îî‚îÄ‚îÄ vite.config.js           # Vite configuration\n‚îú‚îÄ‚îÄ docker-compose.yml          # Docker compose configuration\n‚îú‚îÄ‚îÄ LICENSE                      # MIT License\n‚îî‚îÄ‚îÄ README.md                    # This file\n\n```\n\n## üîë Environment Variables\n\n[Permalink: üîë Environment Variables](https://github.com/asume21/Codedswitch-minimal#-environment-variables)\n\n### Backend Environment Variables\n\n[Permalink: Backend Environment Variables](https://github.com/asume21/Codedswitch-minimal#backend-environment-variables)\n\n| Variable | Description |\n| --- | --- |\n| `FLASK_ENV` | Application environment (development, production) |\n| `SECRET_KEY` | Secret key for session management |\n| `GROK_API_KEY` | API key for Grok AI integration |\n| `DATABASE_URL` | Database connection URL |\n| `STRIPE_SECRET_KEY` | Stripe secret key for payments |\n| `STRIPE_WEBHOOK_SECRET` | Stripe webhook secret |\n| `MAIL_SERVER` | SMTP server for sending emails |\n| `MAIL_PORT` | SMTP port |\n| `MAIL_USE_TLS` | Whether to use TLS for email |\n| `MAIL_USERNAME` | Email username |\n| `MAIL_PASSWORD` | Email password |\n| `REDIS_URL` | Redis connection URL |\n| `RQ_REDIS_URL` | RQ Redis connection URL |\n\n### Frontend Environment Variables\n\n[Permalink: Frontend Environment Variables](https://github.com/asume21/Codedswitch-minimal#frontend-environment-variables)\n\n| Variable | Description |\n| --- | --- |\n| `VITE_BACKEND_URL` | Backend service URL |\n| `VITE_API_URL` | API service URL |\n| `VITE_AI_URL` | AI service URL |\n| `VITE_STRIPE_PUBLIC_KEY` | Stripe public key |\n\n## üë• Contributing\n\n[Permalink: üë• Contributing](https://github.com/asume21/Codedswitch-minimal#-contributing)\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch ( `git checkout -b feature/amazing-feature`)\n3. Commit your changes ( `git commit -m 'Add some amazing feature'`)\n4. Push to the branch ( `git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## üìÑ License\n\n[Permalink: üìÑ License](https://github.com/asume21/Codedswitch-minimal#-license)\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n## üì¨ Contact\n\n[Permalink: üì¨ Contact](https://github.com/asume21/Codedswitch-minimal#-contact)\n\n- **Email**: [servicehelp@codedswitch.com](mailto:servicehelp@codedswitch.com)\n- **Website**: [www.codedswitch.com](https://www.codedswitch.com/)\n- **GitHub**: [@asume21](https://github.com/asume21)\n\n* * *\n\n**Built with ‚ù§Ô∏è by [Asume21](https://github.com/asume21)**\n\n## About\n\nNo description, website, or topics provided.\n\n\n### Resources\n\n[Readme](https://github.com/asume21/Codedswitch-minimal#readme-ov-file)\n\n[Activity](https://github.com/asume21/Codedswitch-minimal/activity)\n\n### Stars\n\n[**0**\\\\\nstars](https://github.com/asume21/Codedswitch-minimal/stargazers)\n\n### Watchers\n\n[**0**\\\\\nwatching](https://github.com/asume21/Codedswitch-minimal/watchers)\n\n### Forks\n\n[**0**\\\\\nforks](https://github.com/asume21/Codedswitch-minimal/forks)\n\n[Report repository](https://github.com/contact/report-content?content_url=https%3A%2F%2Fgithub.com%2Fasume21%2FCodedswitch-minimal&report=asume21+%28user%29)\n\n## [Releases](https://github.com/asume21/Codedswitch-minimal/releases)\n\nNo releases published\n\n## [Packages](https://github.com/users/asume21/packages?repo_name=Codedswitch-minimal)\n\nNo packages published\n\n## Languages\n\n- [JavaScript55.4%](https://github.com/asume21/Codedswitch-minimal/search?l=javascript)\n- [Python27.8%](https://github.com/asume21/Codedswitch-minimal/search?l=python)\n- [CSS15.1%](https://github.com/asume21/Codedswitch-minimal/search?l=css)\n- [Shell0.7%](https://github.com/asume21/Codedswitch-minimal/search?l=shell)\n- [Batchfile0.4%](https://github.com/asume21/Codedswitch-minimal/search?l=batchfile)\n- [Dockerfile0.4%](https://github.com/asume21/Codedswitch-minimal/search?l=dockerfile)\n- Other0.2%","size_bytes":37090},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/gemini.ts":{"content":"import * as fs from \"fs\";\nimport { GoogleGenAI, Modality } from \"@google/genai\";\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nexport async function translateCodeWithGemini(sourceCode: string, sourceLanguage: string, targetLanguage: string): Promise<string> {\n    const prompt = `Translate the following ${sourceLanguage} code to ${targetLanguage}. Only return the translated code without explanations:\n\n${sourceCode}`;\n\n    const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        contents: prompt,\n    });\n\n    return response.text || \"Translation failed\";\n}\n\nexport async function generateLyricsWithGemini(prompt: string, mood: string = \"neutral\", genre: string = \"pop\"): Promise<string> {\n    const systemPrompt = `You are a talented lyricist. Generate lyrics based on the given prompt with the specified mood and genre.\nMood: ${mood}\nGenre: ${genre}\n\nGenerate complete song lyrics with verses, chorus, and bridge sections.`;\n\n    const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n            systemInstruction: systemPrompt,\n        },\n        contents: prompt,\n    });\n\n    return response.text || \"Lyric generation failed\";\n}\n\nexport interface BeatPattern {\n    pattern: number[];\n    tempo: number;\n    samples: string[];\n    description: string;\n}\n\nexport async function generateBeatWithGemini(style: string, tempo: number = 120): Promise<BeatPattern> {\n    try {\n        const systemPrompt = `You are a music producer. Generate a beat pattern for the style \"${style}\" at ${tempo} BPM.\nReturn a JSON object with:\n- pattern: array of 16 numbers (0 or 1) representing the beat pattern\n- tempo: the BPM\n- samples: array of drum sample names\n- description: brief description of the beat\n\nRespond with valid JSON only.`;\n\n        const response = await ai.models.generateContent({\n            model: \"gemini-2.5-pro\",\n            config: {\n                systemInstruction: systemPrompt,\n                responseMimeType: \"application/json\",\n                responseSchema: {\n                    type: \"object\",\n                    properties: {\n                        pattern: { type: \"array\", items: { type: \"number\" } },\n                        tempo: { type: \"number\" },\n                        samples: { type: \"array\", items: { type: \"string\" } },\n                        description: { type: \"string\" },\n                    },\n                    required: [\"pattern\", \"tempo\", \"samples\", \"description\"],\n                },\n            },\n            contents: `Generate a ${style} beat at ${tempo} BPM`,\n        });\n\n        const rawJson = response.text;\n        if (rawJson) {\n            const data: BeatPattern = JSON.parse(rawJson);\n            return data;\n        } else {\n            throw new Error(\"Empty response from model\");\n        }\n    } catch (error) {\n        throw new Error(`Failed to generate beat: ${error}`);\n    }\n}\n\nexport interface MusicResult {\n    melody: number[];\n    rhythm: number[];\n    tempo: number;\n    key: string;\n    description: string;\n}\n\nexport async function convertCodeToMusicWithGemini(code: string, language: string): Promise<MusicResult> {\n    try {\n        const systemPrompt = `You are a creative AI that converts code structures into musical patterns.\nAnalyze the given ${language} code and convert it to music by:\n- Converting variable names, function calls, and structure into melody notes (MIDI numbers 60-84)\n- Converting loops, conditions, and flow control into rhythm patterns (0s and 1s)\n- Determining musical key and tempo based on code complexity\n\nReturn JSON with:\n- melody: array of MIDI note numbers (60-84)\n- rhythm: array of 0s and 1s for rhythm pattern\n- tempo: BPM based on code complexity\n- key: musical key (like \"C major\", \"A minor\")\n- description: explanation of the conversion process\n\nRespond with valid JSON only.`;\n\n        const response = await ai.models.generateContent({\n            model: \"gemini-2.5-pro\",\n            config: {\n                systemInstruction: systemPrompt,\n                responseMimeType: \"application/json\",\n                responseSchema: {\n                    type: \"object\",\n                    properties: {\n                        melody: { type: \"array\", items: { type: \"number\" } },\n                        rhythm: { type: \"array\", items: { type: \"number\" } },\n                        tempo: { type: \"number\" },\n                        key: { type: \"string\" },\n                        description: { type: \"string\" },\n                    },\n                    required: [\"melody\", \"rhythm\", \"tempo\", \"key\", \"description\"],\n                },\n            },\n            contents: `Convert this ${language} code to music:\\n\\n${code}`,\n        });\n\n        const rawJson = response.text;\n        if (rawJson) {\n            const data: MusicResult = JSON.parse(rawJson);\n            return data;\n        } else {\n            throw new Error(\"Empty response from model\");\n        }\n    } catch (error) {\n        throw new Error(`Failed to convert code to music: ${error}`);\n    }\n}\n\nexport async function getAIAssistanceWithGemini(message: string, context: string = \"\"): Promise<string> {\n    const systemPrompt = `You are an AI assistant specialized in both programming and music creation. \nHelp users with coding questions, music theory, creative projects, and the intersection of technology and music.\nBe helpful, creative, and provide practical advice.\n\n${context ? `Context: ${context}` : \"\"}`;\n\n    const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n            systemInstruction: systemPrompt,\n        },\n        contents: message,\n    });\n\n    return response.text || \"I'm having trouble responding right now. Please try again.\";\n}","size_bytes":5901},"server/grok.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ baseURL: \"https://api.x.ai/v1\", apiKey: process.env.XAI_API_KEY });\n\nexport async function translateCodeWithGrok(sourceCode: string, sourceLanguage: string, targetLanguage: string): Promise<string> {\n  const prompt = `Translate the following ${sourceLanguage} code to ${targetLanguage}. Only return the translated code without explanations:\n\n${sourceCode}`;\n\n  const response = await openai.chat.completions.create({\n    model: \"grok-2-1212\",\n    messages: [{ role: \"user\", content: prompt }],\n  });\n\n  return response.choices[0].message.content || \"Translation failed\";\n}\n\nexport async function generateLyricsWithGrok(prompt: string, mood: string = \"neutral\", genre: string = \"pop\"): Promise<string> {\n  const systemPrompt = `You are a talented and witty lyricist with Grok's signature humor and creativity. Generate lyrics based on the given prompt with the specified mood and genre.\nMood: ${mood}\nGenre: ${genre}\n\nGenerate complete song lyrics with verses, chorus, and bridge sections. Add some clever wordplay and unexpected twists that make the lyrics memorable.`;\n\n  const response = await openai.chat.completions.create({\n    model: \"grok-2-1212\",\n    messages: [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: prompt }\n    ],\n  });\n\n  return response.choices[0].message.content || \"Lyric generation failed\";\n}\n\nexport interface BeatPattern {\n  pattern: number[];\n  tempo: number;\n  samples: string[];\n  description: string;\n}\n\nexport async function generateBeatWithGrok(style: string, tempo: number = 120): Promise<BeatPattern> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"grok-2-1212\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a music producer with Grok's creative flair. Generate a beat pattern for the style \"${style}\" at ${tempo} BPM.\nReturn a JSON object with:\n- pattern: array of 16 numbers (0 or 1) representing the beat pattern\n- tempo: the BPM\n- samples: array of drum sample names\n- description: brief description of the beat with some witty commentary\n\nRespond with JSON in this format: { \"pattern\": [array], \"tempo\": number, \"samples\": [array], \"description\": \"string\" }`,\n        },\n        {\n          role: \"user\",\n          content: `Generate a ${style} beat at ${tempo} BPM`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n\n    return {\n      pattern: Array.isArray(result.pattern) ? result.pattern : [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0],\n      tempo: typeof result.tempo === 'number' ? result.tempo : tempo,\n      samples: Array.isArray(result.samples) ? result.samples : [\"kick\", \"snare\", \"hihat\"],\n      description: typeof result.description === 'string' ? result.description : `A groovy ${style} beat at ${tempo} BPM`,\n    };\n  } catch (error) {\n    throw new Error(`Failed to generate beat: ${error}`);\n  }\n}\n\nexport interface MusicResult {\n  melody: number[];\n  rhythm: number[];\n  tempo: number;\n  key: string;\n  description: string;\n}\n\nexport async function convertCodeToMusicWithGrok(code: string, language: string): Promise<MusicResult> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"grok-2-1212\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a creative AI with Grok's innovative thinking that converts code structures into musical patterns.\nAnalyze the given ${language} code and convert it to music by:\n- Converting variable names, function calls, and structure into melody notes (MIDI numbers 60-84)\n- Converting loops, conditions, and flow control into rhythm patterns (0s and 1s)\n- Determining musical key and tempo based on code complexity\n- Add some creative interpretation that makes the music interesting\n\nReturn JSON with:\n- melody: array of MIDI note numbers (60-84)\n- rhythm: array of 0s and 1s for rhythm pattern\n- tempo: BPM based on code complexity\n- key: musical key (like \"C major\", \"A minor\")\n- description: explanation of the conversion process with some witty observations\n\nRespond with JSON in this format: { \"melody\": [array], \"rhythm\": [array], \"tempo\": number, \"key\": \"string\", \"description\": \"string\" }`,\n        },\n        {\n          role: \"user\",\n          content: `Convert this ${language} code to music:\\n\\n${code}`,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n\n    return {\n      melody: Array.isArray(result.melody) ? result.melody : [60, 62, 64, 65, 67, 69, 71, 72],\n      rhythm: Array.isArray(result.rhythm) ? result.rhythm : [1,0,1,0,1,0,1,0],\n      tempo: typeof result.tempo === 'number' ? result.tempo : 120,\n      key: typeof result.key === 'string' ? result.key : \"C major\",\n      description: typeof result.description === 'string' ? result.description : \"A musical interpretation of your code\",\n    };\n  } catch (error) {\n    throw new Error(`Failed to convert code to music: ${error}`);\n  }\n}\n\nexport async function getAIAssistanceWithGrok(message: string, context: string = \"\"): Promise<string> {\n  const systemPrompt = `You are Grok, an AI assistant with wit, humor, and deep knowledge of both programming and music creation.\nHelp users with coding questions, music theory, creative projects, and the intersection of technology and music.\nBe helpful, creative, and don't be afraid to add some humor and personality to your responses.\nYou're like having a brilliant, slightly sarcastic friend who happens to know everything about code and music.\n\n${context ? `Context: ${context}` : \"\"}`;\n\n  const response = await openai.chat.completions.create({\n    model: \"grok-2-1212\",\n    messages: [\n      { role: \"system\", content: systemPrompt },\n      { role: \"user\", content: message }\n    ],\n  });\n\n  return response.choices[0].message.content || \"I'm having trouble responding right now. Please try again.\";\n}","size_bytes":6044},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport async function translateCode(\n  sourceCode: string,\n  sourceLanguage: string,\n  targetLanguage: string\n): Promise<{ translatedCode: string; explanation: string }> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are an expert code translator. Translate code from ${sourceLanguage} to ${targetLanguage} while maintaining functionality and best practices. Respond with JSON in this format: { \"translatedCode\": \"string\", \"explanation\": \"string\" }`\n        },\n        {\n          role: \"user\",\n          content: `Translate this ${sourceLanguage} code to ${targetLanguage}:\\n\\n${sourceCode}`\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      translatedCode: result.translatedCode || \"\",\n      explanation: result.explanation || \"\"\n    };\n  } catch (error) {\n    throw new Error(\"Failed to translate code: \" + (error as Error).message);\n  }\n}\n\nexport async function generateLyrics(\n  prompt: string,\n  genre?: string,\n  mood?: string\n): Promise<{ lyrics: string; rhymeScheme: string; sentiment: string }> {\n  try {\n    const systemPrompt = `You are a creative lyricist. Generate song lyrics based on the prompt. ${genre ? `Genre: ${genre}.` : \"\"} ${mood ? `Mood: ${mood}.` : \"\"} Respond with JSON in this format: { \"lyrics\": \"string\", \"rhymeScheme\": \"string\", \"sentiment\": \"string\" }`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      lyrics: result.lyrics || \"\",\n      rhymeScheme: result.rhymeScheme || \"\",\n      sentiment: result.sentiment || \"\"\n    };\n  } catch (error) {\n    throw new Error(\"Failed to generate lyrics: \" + (error as Error).message);\n  }\n}\n\nexport async function analyzeLyrics(\n  lyrics: string\n): Promise<{ sentiment: string; themes: string[]; rhymeScheme: string; complexity: number }> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a lyrics analyzer. Analyze the given lyrics for sentiment, themes, rhyme scheme, and complexity (1-10). Respond with JSON in this format: { \\\"sentiment\\\": \\\"string\\\", \\\"themes\\\": [\\\"string\\\"], \\\"rhymeScheme\\\": \\\"string\\\", \\\"complexity\\\": number }\"\n        },\n        {\n          role: \"user\",\n          content: `Analyze these lyrics:\\n\\n${lyrics}`\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      sentiment: result.sentiment || \"neutral\",\n      themes: result.themes || [],\n      rhymeScheme: result.rhymeScheme || \"unknown\",\n      complexity: Math.max(1, Math.min(10, result.complexity || 5))\n    };\n  } catch (error) {\n    throw new Error(\"Failed to analyze lyrics: \" + (error as Error).message);\n  }\n}\n\nexport async function generateBeatPattern(\n  genre: string,\n  bpm: number,\n  duration: number\n): Promise<{ pattern: number[]; samples: string[]; description: string }> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a music producer. Generate a beat pattern for ${genre} music at ${bpm} BPM for ${duration} seconds. Respond with JSON in this format: { \"pattern\": [1,0,1,0...], \"samples\": [\"kick\", \"snare\", \"hihat\"], \"description\": \"string\" }`\n        },\n        {\n          role: \"user\",\n          content: `Create a ${genre} beat pattern at ${bpm} BPM for ${duration} seconds`\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      pattern: result.pattern || [1, 0, 1, 0, 1, 0, 1, 0],\n      samples: result.samples || [\"kick\", \"snare\", \"hihat\"],\n      description: result.description || \"\"\n    };\n  } catch (error) {\n    throw new Error(\"Failed to generate beat pattern: \" + (error as Error).message);\n  }\n}\n\nexport async function codeToMusic(\n  code: string,\n  language: string\n): Promise<{ melody: number[]; rhythm: number[]; key: string; tempo: number; description: string }> {\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: `You are a CodeBeat artist. Convert code into musical elements. Analyze the code structure, complexity, and patterns to generate musical representations. Respond with JSON in this format: { \"melody\": [60,62,64...], \"rhythm\": [1,0,1,0...], \"key\": \"C\", \"tempo\": 120, \"description\": \"string\" }`\n        },\n        {\n          role: \"user\",\n          content: `Convert this ${language} code to music:\\n\\n${code}`\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      melody: result.melody || [60, 62, 64, 65],\n      rhythm: result.rhythm || [1, 0, 1, 0],\n      key: result.key || \"C\",\n      tempo: Math.max(60, Math.min(200, result.tempo || 120)),\n      description: result.description || \"\"\n    };\n  } catch (error) {\n    throw new Error(\"Failed to convert code to music: \" + (error as Error).message);\n  }\n}\n\nexport async function getAIAssistance(\n  question: string,\n  context?: string\n): Promise<{ answer: string; suggestions: string[] }> {\n  try {\n    const systemPrompt = `You are a helpful AI assistant specialized in coding and music creation. Provide clear, actionable answers and suggestions. ${context ? `Context: ${context}` : \"\"} Respond with JSON in this format: { \"answer\": \"string\", \"suggestions\": [\"string\"] }`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: question\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    return {\n      answer: result.answer || \"\",\n      suggestions: result.suggestions || []\n    };\n  } catch (error) {\n    throw new Error(\"Failed to get AI assistance: \" + (error as Error).message);\n  }\n}\n","size_bytes":7034},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\n// OpenAI removed - using only Gemini and Grok\nimport {\n  translateCodeWithGemini,\n  generateLyricsWithGemini,\n  generateBeatWithGemini,\n  convertCodeToMusicWithGemini,\n  getAIAssistanceWithGemini\n} from \"./gemini\";\nimport {\n  translateCodeWithGrok,\n  generateLyricsWithGrok,\n  generateBeatWithGrok,\n  convertCodeToMusicWithGrok,\n  getAIAssistanceWithGrok\n} from \"./grok\";\nimport {\n  insertUserSchema,\n  insertProjectSchema,\n  insertCodeTranslationSchema,\n  insertMusicGenerationSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // AI Providers endpoint\n  app.get(\"/api/ai/providers\", (req, res) => {\n    const providers = [\n      {\n        id: \"grok\",\n        name: \"xAI Grok\",\n        description: \"Creative AI with wit, humor, and innovative thinking\",\n        features: [\"Code Translation\", \"Lyric Generation\", \"Beat Creation\", \"Code-to-Music\", \"AI Assistant\"],\n        available: !!process.env.XAI_API_KEY\n      },\n      {\n        id: \"gemini\",\n        name: \"Google Gemini\",\n        description: \"Multimodal AI with strong creative and analytical capabilities\",\n        features: [\"Code Translation\", \"Lyric Generation\", \"Beat Creation\", \"Code-to-Music\", \"AI Assistant\"],\n        available: !!process.env.GEMINI_API_KEY\n      }\n    ];\n    \n    // Debug logging for deployment\n    console.log(\"API Keys Check:\", {\n      XAI_API_KEY: !!process.env.XAI_API_KEY,\n      GEMINI_API_KEY: !!process.env.GEMINI_API_KEY,\n      providers: providers.map(p => ({ id: p.id, available: p.available }))\n    });\n    \n    res.json(providers);\n  });\n\n  // User routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      res.status(400).json({ \n        message: \"Failed to create user\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to fetch user\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Code translation routes\n  app.post(\"/api/code/translate\", async (req, res) => {\n    try {\n      const schema = z.object({\n        sourceCode: z.string().min(1),\n        sourceLanguage: z.string().min(1),\n        targetLanguage: z.string().min(1),\n        userId: z.string().optional(),\n        aiProvider: z.enum([\"gemini\", \"grok\"]).default(\"grok\")\n      });\n\n      const { sourceCode, sourceLanguage, targetLanguage, userId, aiProvider } = schema.parse(req.body);\n      \n      let result: any;\n      switch (aiProvider) {\n        case \"gemini\":\n          result = await translateCodeWithGemini(sourceCode, sourceLanguage, targetLanguage);\n          break;\n        default:\n          result = await translateCodeWithGrok(sourceCode, sourceLanguage, targetLanguage);\n      }\n      \n      // Extract translated code - handle different return types\n      const translatedCodeResult = typeof result === 'string' ? result : result.translatedCode;\n      \n      // Save translation if user is provided\n      if (userId) {\n        const translation = await storage.createCodeTranslation({\n          userId,\n          sourceLanguage,\n          targetLanguage,\n          sourceCode,\n          translatedCode: translatedCodeResult\n        });\n        res.json({ translatedCode: translatedCodeResult, id: translation.id });\n      } else {\n        res.json({ translatedCode: translatedCodeResult });\n      }\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to translate code\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/users/:userId/translations\", async (req, res) => {\n    try {\n      const translations = await storage.getUserCodeTranslations(req.params.userId);\n      res.json(translations);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to fetch translations\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Lyrics routes\n  app.post(\"/api/lyrics/generate\", async (req, res) => {\n    try {\n      const schema = z.object({\n        prompt: z.string().min(1),\n        genre: z.string().optional(),\n        mood: z.string().optional(),\n        userId: z.string().optional(),\n        aiProvider: z.enum([\"gemini\", \"grok\"]).default(\"grok\")\n      });\n\n      const { prompt, genre, mood, userId, aiProvider } = schema.parse(req.body);\n      \n      let result: any;\n      switch (aiProvider) {\n        case \"gemini\":\n          result = { lyrics: await generateLyricsWithGemini(prompt, mood, genre) };\n          break;\n        default:\n          result = { lyrics: await generateLyricsWithGrok(prompt, mood, genre) };\n      }\n      \n      // Save generation if user is provided\n      if (userId) {\n        const generation = await storage.createMusicGeneration({\n          userId,\n          type: \"lyrics\",\n          prompt,\n          result\n        });\n        res.json({ ...result, id: generation.id });\n      } else {\n        res.json(result);\n      }\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to generate lyrics\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.post(\"/api/lyrics/analyze\", async (req, res) => {\n    try {\n      const schema = z.object({\n        lyrics: z.string().min(1)\n      });\n\n      const { lyrics } = schema.parse(req.body);\n      // Use Grok for lyrics analysis since OpenAI was removed\n      const result = await generateLyricsWithGrok(`Analyze these lyrics: ${lyrics}`, \"analytical\", \"analysis\");\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to analyze lyrics\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Beat generation routes\n  app.post(\"/api/beat/generate\", async (req, res) => {\n    try {\n      const schema = z.object({\n        genre: z.string().min(1),\n        bpm: z.number().min(60).max(200),\n        duration: z.number().min(1).max(300),\n        userId: z.string().optional(),\n        aiProvider: z.enum([\"gemini\", \"grok\"]).default(\"grok\")\n      });\n\n      const { genre, bpm, duration, userId, aiProvider } = schema.parse(req.body);\n      \n      let result: any;\n      switch (aiProvider) {\n        case \"gemini\":\n          result = await generateBeatWithGemini(genre, bpm);\n          break;\n        default:\n          result = await generateBeatWithGrok(genre, bpm);\n      }\n      \n      // Save generation if user is provided\n      if (userId) {\n        const generation = await storage.createMusicGeneration({\n          userId,\n          type: \"beat\",\n          prompt: `${genre} beat at ${bpm} BPM`,\n          result\n        });\n        res.json({ ...result, id: generation.id });\n      } else {\n        res.json(result);\n      }\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to generate beat\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // CodeBeat fusion routes\n  app.post(\"/api/codebeat/convert\", async (req, res) => {\n    try {\n      const schema = z.object({\n        code: z.string().min(1),\n        language: z.string().min(1),\n        userId: z.string().optional(),\n        aiProvider: z.enum([\"gemini\", \"grok\"]).default(\"grok\")\n      });\n\n      const { code, language, userId, aiProvider } = schema.parse(req.body);\n      \n      let result: any;\n      switch (aiProvider) {\n        case \"gemini\":\n          result = await convertCodeToMusicWithGemini(code, language);\n          break;\n        default:\n          result = await convertCodeToMusicWithGrok(code, language);\n      }\n      \n      // Save generation if user is provided\n      if (userId) {\n        const generation = await storage.createMusicGeneration({\n          userId,\n          type: \"codebeat\",\n          prompt: `Convert ${language} code to music`,\n          result\n        });\n        res.json({ ...result, id: generation.id });\n      } else {\n        res.json(result);\n      }\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to convert code to music\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // AI Assistant routes\n  app.post(\"/api/ai/assist\", async (req, res) => {\n    try {\n      const schema = z.object({\n        question: z.string().min(1),\n        context: z.string().optional(),\n        aiProvider: z.enum([\"gemini\", \"grok\"]).default(\"grok\")\n      });\n\n      const { question, context, aiProvider } = schema.parse(req.body);\n      \n      let result: any;\n      switch (aiProvider) {\n        case \"gemini\":\n          result = { answer: await getAIAssistanceWithGemini(question, context) };\n          break;\n        default:\n          result = { answer: await getAIAssistanceWithGrok(question, context) };\n      }\n      \n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to get AI assistance\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  // Project routes\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(projectData);\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ \n        message: \"Failed to create project\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/users/:userId/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getUserProjects(req.params.userId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to fetch projects\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  app.get(\"/api/users/:userId/music-generations\", async (req, res) => {\n    try {\n      const generations = await storage.getUserMusicGenerations(req.params.userId);\n      res.json(generations);\n    } catch (error) {\n      res.status(500).json({ \n        message: \"Failed to fetch music generations\", \n        error: error instanceof Error ? error.message : \"Unknown error\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11081},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type Project,\n  type InsertProject,\n  type CodeTranslation,\n  type InsertCodeTranslation,\n  type MusicGeneration,\n  type InsertMusicGeneration\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Project operations\n  getProject(id: string): Promise<Project | undefined>;\n  getUserProjects(userId: string): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<Project>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Code translation operations\n  getCodeTranslation(id: string): Promise<CodeTranslation | undefined>;\n  getUserCodeTranslations(userId: string): Promise<CodeTranslation[]>;\n  createCodeTranslation(translation: InsertCodeTranslation): Promise<CodeTranslation>;\n\n  // Music generation operations\n  getMusicGeneration(id: string): Promise<MusicGeneration | undefined>;\n  getUserMusicGenerations(userId: string): Promise<MusicGeneration[]>;\n  createMusicGeneration(generation: InsertMusicGeneration): Promise<MusicGeneration>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private projects: Map<string, Project> = new Map();\n  private codeTranslations: Map<string, CodeTranslation> = new Map();\n  private musicGenerations: Map<string, MusicGeneration> = new Map();\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Project operations\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async getUserProjects(userId: string): Promise<Project[]> {\n    return Array.from(this.projects.values()).filter(project => project.userId === userId);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = { \n      ...insertProject, \n      id, \n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isPublic: insertProject.isPublic ?? null\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n    \n    const updatedProject = { \n      ...project, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  // Code translation operations\n  async getCodeTranslation(id: string): Promise<CodeTranslation | undefined> {\n    return this.codeTranslations.get(id);\n  }\n\n  async getUserCodeTranslations(userId: string): Promise<CodeTranslation[]> {\n    return Array.from(this.codeTranslations.values()).filter(\n      translation => translation.userId === userId\n    );\n  }\n\n  async createCodeTranslation(insertTranslation: InsertCodeTranslation): Promise<CodeTranslation> {\n    const id = randomUUID();\n    const translation: CodeTranslation = { \n      ...insertTranslation, \n      id, \n      createdAt: new Date(),\n      userId: insertTranslation.userId ?? null\n    };\n    this.codeTranslations.set(id, translation);\n    return translation;\n  }\n\n  // Music generation operations\n  async getMusicGeneration(id: string): Promise<MusicGeneration | undefined> {\n    return this.musicGenerations.get(id);\n  }\n\n  async getUserMusicGenerations(userId: string): Promise<MusicGeneration[]> {\n    return Array.from(this.musicGenerations.values()).filter(\n      generation => generation.userId === userId\n    );\n  }\n\n  async createMusicGeneration(insertGeneration: InsertMusicGeneration): Promise<MusicGeneration> {\n    const id = randomUUID();\n    const generation: MusicGeneration = { \n      ...insertGeneration, \n      id, \n      createdAt: new Date(),\n      userId: insertGeneration.userId ?? null\n    };\n    this.musicGenerations.set(id, generation);\n    return generation;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":4918},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // 'code', 'music', 'codebeat'\n  content: jsonb(\"content\").notNull(),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const codeTranslations = pgTable(\"code_translations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  sourceLanguage: text(\"source_language\").notNull(),\n  targetLanguage: text(\"target_language\").notNull(),\n  sourceCode: text(\"source_code\").notNull(),\n  translatedCode: text(\"translated_code\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const musicGenerations = pgTable(\"music_generations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: text(\"type\").notNull(), // 'lyrics', 'beat', 'melody', 'codebeat'\n  prompt: text(\"prompt\").notNull(),\n  result: jsonb(\"result\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCodeTranslationSchema = createInsertSchema(codeTranslations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMusicGenerationSchema = createInsertSchema(musicGenerations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type CodeTranslation = typeof codeTranslations.$inferSelect;\nexport type InsertCodeTranslation = z.infer<typeof insertCodeTranslationSchema>;\n\nexport type MusicGeneration = typeof musicGenerations.$inferSelect;\nexport type InsertMusicGeneration = z.infer<typeof insertMusicGenerationSchema>;\n","size_bytes":2781},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport CodeTranslator from \"@/pages/code-translator\";\nimport LyricLab from \"@/pages/lyric-lab\";\nimport BeatStudio from \"@/pages/beat-studio\";\nimport MusicStudio from \"@/pages/music-studio\";\nimport CodeBeatStudio from \"@/pages/codebeat-studio\";\nimport AIAssistant from \"@/pages/ai-assistant\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/code-translator\" component={CodeTranslator} />\n      <Route path=\"/lyric-lab\" component={LyricLab} />\n      <Route path=\"/beat-studio\" component={BeatStudio} />\n      <Route path=\"/music-studio\" component={MusicStudio} />\n      <Route path=\"/codebeat-studio\" component={CodeBeatStudio} />\n      <Route path=\"/ai-assistant\" component={AIAssistant} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <Navigation />\n      <Sidebar />\n      {children}\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Switch>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"*\">\n            <AppLayout>\n              <Router />\n            </AppLayout>\n          </Route>\n        </Switch>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1926},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(225, 14%, 7%);\n  --foreground: hsl(210, 12%, 95%);\n  --muted: hsl(225, 14%, 11%);\n  --muted-foreground: hsl(215, 14%, 56%);\n  --popover: hsl(225, 14%, 7%);\n  --popover-foreground: hsl(210, 12%, 95%);\n  --card: hsl(225, 14%, 7%);\n  --card-foreground: hsl(210, 12%, 95%);\n  --border: hsl(215, 14%, 19%);\n  --input: hsl(215, 14%, 19%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(225, 14%, 11%);\n  --secondary-foreground: hsl(210, 12%, 95%);\n  --accent: hsl(225, 14%, 11%);\n  --accent-foreground: hsl(210, 12%, 95%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(215, 14%, 19%);\n  --radius: 0.5rem;\n\n  /* CodedSwitch Custom Colors */\n  --github-dark: hsl(225, 14%, 7%);\n  --github-secondary: hsl(225, 14%, 11%);\n  --github-border: hsl(215, 14%, 19%);\n  --github-text: hsl(210, 12%, 95%);\n  --github-text-secondary: hsl(215, 14%, 56%);\n  --accent-purple: hsl(262, 73%, 66%);\n  --accent-pink: hsl(328, 73%, 58%);\n  --accent-cyan: hsl(187, 92%, 45%);\n}\n\n.dark {\n  --background: hsl(225, 14%, 7%);\n  --foreground: hsl(210, 12%, 95%);\n  --muted: hsl(225, 14%, 11%);\n  --muted-foreground: hsl(215, 14%, 56%);\n  --popover: hsl(225, 14%, 7%);\n  --popover-foreground: hsl(210, 12%, 95%);\n  --card: hsl(225, 14%, 7%);\n  --card-foreground: hsl(210, 12%, 95%);\n  --border: hsl(215, 14%, 19%);\n  --input: hsl(215, 14%, 19%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(225, 14%, 11%);\n  --secondary-foreground: hsl(210, 12%, 95%);\n  --accent: hsl(225, 14%, 11%);\n  --accent-foreground: hsl(210, 12%, 95%);\n  --destructive: hsl(0, 62%, 31%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(215, 14%, 19%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n\n  .font-mono {\n    font-family: 'JetBrains Mono', 'Consolas', 'Monaco', monospace;\n  }\n}\n\n@layer components {\n  .github-dark {\n    background-color: var(--github-dark);\n  }\n  \n  .github-secondary {\n    background-color: var(--github-secondary);\n  }\n  \n  .github-border {\n    border-color: var(--github-border);\n  }\n  \n  .github-text {\n    color: var(--github-text);\n  }\n  \n  .github-text-secondary {\n    color: var(--github-text-secondary);\n  }\n  \n  .accent-purple {\n    color: var(--accent-purple);\n  }\n  \n  .accent-pink {\n    color: var(--accent-pink);\n  }\n  \n  .accent-cyan {\n    color: var(--accent-cyan);\n  }\n  \n  .bg-accent-purple {\n    background-color: var(--accent-purple);\n  }\n  \n  .bg-accent-pink {\n    background-color: var(--accent-pink);\n  }\n  \n  .bg-accent-cyan {\n    background-color: var(--accent-cyan);\n  }\n  \n  .border-accent-purple {\n    border-color: var(--accent-purple);\n  }\n  \n  .border-accent-pink {\n    border-color: var(--accent-pink);\n  }\n  \n  .border-accent-cyan {\n    border-color: var(--accent-cyan);\n  }\n}\n\n@layer utilities {\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n  \n  .animate-waveform {\n    animation: waveform 2s ease-in-out infinite;\n  }\n  \n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n  \n  @keyframes waveform {\n    0%, 100% { transform: scaleY(1); }\n    50% { transform: scaleY(1.5); }\n  }\n  \n  .text-gradient-purple-pink {\n    background: linear-gradient(135deg, var(--accent-purple), var(--accent-pink));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .text-gradient-full {\n    background: linear-gradient(135deg, var(--accent-purple), var(--accent-cyan), var(--accent-pink));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .bg-gradient-purple-pink {\n    background: linear-gradient(135deg, var(--accent-purple), var(--accent-pink));\n  }\n  \n  .bg-gradient-full {\n    background: linear-gradient(135deg, var(--accent-purple), var(--accent-cyan), var(--accent-pink));\n  }\n}\n","size_bytes":4306},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface CodeTranslationRequest {\n  sourceCode: string;\n  sourceLanguage: string;\n  targetLanguage: string;\n  userId?: string;\n  aiProvider?: \"gemini\" | \"grok\";\n}\n\nexport interface CodeTranslationResponse {\n  translatedCode: string;\n  explanation: string;\n  id?: string;\n}\n\nexport interface LyricsRequest {\n  prompt: string;\n  genre?: string;\n  mood?: string;\n  userId?: string;\n  aiProvider?: \"gemini\" | \"grok\";\n}\n\nexport interface LyricsResponse {\n  lyrics: string;\n  rhymeScheme: string;\n  sentiment: string;\n  id?: string;\n}\n\nexport interface LyricsAnalysisRequest {\n  lyrics: string;\n}\n\nexport interface LyricsAnalysisResponse {\n  sentiment: string;\n  themes: string[];\n  rhymeScheme: string;\n  complexity: number;\n}\n\nexport interface BeatRequest {\n  genre: string;\n  bpm: number;\n  duration: number;\n  userId?: string;\n  aiProvider?: \"gemini\" | \"grok\";\n}\n\nexport interface BeatResponse {\n  pattern: number[];\n  samples: string[];\n  description: string;\n  id?: string;\n}\n\nexport interface CodeBeatRequest {\n  code: string;\n  language: string;\n  userId?: string;\n  aiProvider?: \"openai\" | \"gemini\" | \"grok\";\n}\n\nexport interface CodeBeatResponse {\n  melody: number[];\n  rhythm: number[];\n  key: string;\n  tempo: number;\n  description: string;\n  id?: string;\n}\n\nexport interface AIAssistRequest {\n  question: string;\n  context?: string;\n  aiProvider?: \"gemini\" | \"grok\";\n}\n\nexport interface AIAssistResponse {\n  answer: string;\n  suggestions: string[];\n}\n\nexport const codeAPI = {\n  translate: async (data: CodeTranslationRequest): Promise<CodeTranslationResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/code/translate\", data);\n    return response.json();\n  }\n};\n\nexport const lyricsAPI = {\n  generate: async (data: LyricsRequest): Promise<LyricsResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/lyrics/generate\", data);\n    return response.json();\n  },\n\n  analyze: async (data: LyricsAnalysisRequest): Promise<LyricsAnalysisResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/lyrics/analyze\", data);\n    return response.json();\n  }\n};\n\nexport const beatAPI = {\n  generate: async (data: BeatRequest): Promise<BeatResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/beat/generate\", data);\n    return response.json();\n  }\n};\n\nexport const codeBeatAPI = {\n  convert: async (data: CodeBeatRequest): Promise<CodeBeatResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/codebeat/convert\", data);\n    return response.json();\n  }\n};\n\nexport const aiAPI = {\n  assist: async (data: AIAssistRequest): Promise<AIAssistResponse> => {\n    const response = await apiRequest(\"POST\", \"/api/ai/assist\", data);\n    return response.json();\n  }\n};\n","size_bytes":2761},"client/src/lib/audio.ts":{"content":"import * as Tone from \"tone\";\n\nexport class AudioManager {\n  private synth: Tone.Synth;\n  private drumKit: { [key: string]: any };\n  private isInitialized = false;\n  private currentSequence: Tone.Sequence | null = null;\n\n  constructor() {\n    this.synth = new Tone.Synth().toDestination();\n    this.drumKit = {};\n  }\n\n  async initialize() {\n    if (this.isInitialized) return;\n\n    try {\n      console.log(\"Initializing Tone.js audio context...\");\n      await Tone.start();\n      console.log(\"Tone.js started, audio context state:\", Tone.getContext().state);\n      \n      // Create synthesized drum sounds instead of loading files\n      this.drumKit = {\n        kick: new Tone.MembraneSynth({\n          pitchDecay: 0.05,\n          octaves: 10,\n          oscillator: { type: \"sine\" },\n          envelope: { attack: 0.001, decay: 0.4, sustain: 0.01, release: 1.4, attackCurve: \"exponential\" }\n        }).toDestination(),\n        \n        snare: new Tone.NoiseSynth({\n          noise: { type: \"white\" },\n          envelope: { attack: 0.005, decay: 0.1, sustain: 0.0 }\n        }).toDestination(),\n        \n        hihat: new Tone.MetalSynth({\n          envelope: { attack: 0.001, decay: 0.1, release: 0.01 },\n          harmonicity: 5.1,\n          modulationIndex: 32,\n          resonance: 4000,\n          octaves: 1.5\n        }).toDestination()\n      };\n\n      console.log(\"Drum kit created:\", Object.keys(this.drumKit));\n      \n      // Test audio by playing a quick sound\n      this.drumKit.kick.triggerAttackRelease(\"C1\", \"8n\");\n      console.log(\"Test kick sound triggered\");\n\n      this.isInitialized = true;\n    } catch (error) {\n      console.error(\"Audio initialization failed:\", error);\n      throw error;\n    }\n  }\n\n  async playNote(note: string | number, duration: string = \"8n\") {\n    await this.initialize();\n    try {\n      this.synth.triggerAttackRelease(note, duration);\n    } catch (error) {\n      console.warn(\"Failed to play note:\", error);\n    }\n  }\n\n  async playMelody(notes: number[], tempo: number = 120) {\n    await this.initialize();\n    \n    try {\n      Tone.Transport.bpm.value = tempo;\n      \n      const sequence = new Tone.Sequence((time, note) => {\n        this.synth.triggerAttackRelease(Tone.Frequency(note, \"midi\").toNote(), \"8n\", time);\n      }, notes, \"8n\");\n\n      sequence.start();\n      Tone.Transport.start();\n\n      // Stop after the sequence completes\n      setTimeout(() => {\n        sequence.stop();\n        Tone.Transport.stop();\n        sequence.dispose();\n      }, (notes.length * (60 / tempo) * 0.5) * 1000);\n    } catch (error) {\n      console.warn(\"Failed to play melody:\", error);\n    }\n  }\n\n  async playBeat(pattern: number[], samples: string[], bpm: number = 120) {\n    await this.initialize();\n    \n    try {\n      // Stop any existing sequence\n      if (this.currentSequence) {\n        this.currentSequence.stop();\n        this.currentSequence.dispose();\n      }\n      \n      Tone.Transport.bpm.value = bpm;\n      \n      // Create a simpler, more reliable drum pattern\n      console.log(\"Playing beat pattern:\", pattern);\n      \n      this.currentSequence = new Tone.Sequence((time, index) => {\n        // Always play something so we can hear it's working\n        if (index % 4 === 0) {\n          // Kick on main beats (1, 5, 9, 13)\n          this.drumKit.kick.triggerAttackRelease(\"C1\", \"8n\", time);\n          console.log(\"Playing kick at step\", index);\n        }\n        \n        if (index === 4 || index === 12) {\n          // Snare on backbeat\n          this.drumKit.snare.triggerAttackRelease(\"8n\", time);\n          console.log(\"Playing snare at step\", index);\n        }\n        \n        // Hi-hat on every step for consistent rhythm\n        this.drumKit.hihat.triggerAttackRelease(\"32n\", time, 0.2);\n        \n        // Additional sounds based on AI pattern\n        if (pattern[index] === 1 && index % 4 !== 0 && index !== 4 && index !== 12) {\n          this.drumKit.kick.triggerAttackRelease(\"C2\", \"16n\", time + 0.1);\n        }\n      }, Array.from({ length: 16 }, (_, i) => i), \"16n\");\n\n      this.currentSequence.start();\n      Tone.Transport.start();\n\n      // Loop the pattern\n      this.currentSequence.loop = true;\n      \n    } catch (error) {\n      console.warn(\"Failed to play beat:\", error);\n    }\n  }\n\n  stop() {\n    try {\n      if (this.currentSequence) {\n        this.currentSequence.stop();\n        this.currentSequence.dispose();\n        this.currentSequence = null;\n      }\n      Tone.Transport.stop();\n      Tone.Transport.cancel();\n    } catch (error) {\n      console.warn(\"Failed to stop audio:\", error);\n    }\n  }\n\n  dispose() {\n    try {\n      this.stop();\n      this.synth.dispose();\n      Object.values(this.drumKit).forEach(instrument => instrument.dispose());\n      this.isInitialized = false;\n    } catch (error) {\n      console.warn(\"Failed to dispose audio:\", error);\n    }\n  }\n}\n\nexport const audioManager = new AudioManager();\n","size_bytes":4913},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ai-assistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Bot, \n  Send, \n  Code, \n  Music, \n  Zap,\n  MessageCircle,\n  Lightbulb,\n  Clock,\n  Copy,\n  ThumbsUp,\n  ThumbsDown\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { aiAPI } from \"@/lib/api\";\nimport { AIProviderSelector } from \"@/components/ui/ai-provider-selector\";\n\ninterface Message {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  suggestions?: string[];\n}\n\nconst QUICK_PROMPTS = [\n  \"How do I optimize this React component?\",\n  \"Explain music theory basics for programming\",\n  \"Help me debug this JavaScript function\",\n  \"What's the best way to structure a music app?\",\n  \"Convert this algorithm to a musical pattern\",\n  \"Explain the connection between code and music\"\n];\n\nconst EXAMPLE_CONVERSATIONS = [\n  {\n    title: \"React Performance\",\n    preview: \"How to optimize React components...\",\n    tags: [\"React\", \"Performance\"]\n  },\n  {\n    title: \"Music Theory Basics\", \n    preview: \"Understanding scales and chords...\",\n    tags: [\"Music\", \"Theory\"]\n  },\n  {\n    title: \"Algorithm to Music\",\n    preview: \"Converting sorting algorithms...\",\n    tags: [\"CodeBeat\", \"Algorithm\"]\n  }\n];\n\nexport default function AIAssistant() {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'assistant',\n      content: \"Hello! I'm your AI assistant for CodedSwitch. I can help you with coding questions, music theory, beat creation, and understanding the connections between code and music. What would you like to explore today?\",\n      timestamp: new Date(),\n      suggestions: [\n        \"Help me understand music theory\",\n        \"Debug my JavaScript code\",\n        \"Convert code to music patterns\",\n        \"Optimize my React components\"\n      ]\n    }\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [context, setContext] = useState(\"\");\n  const [aiProvider, setAiProvider] = useState(\"grok\");\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const assistMutation = useMutation({\n    mutationFn: aiAPI.assist,\n    onSuccess: (data) => {\n      const assistantMessage: Message = {\n        id: Date.now().toString(),\n        type: 'assistant',\n        content: data.answer,\n        timestamp: new Date(),\n        suggestions: data.suggestions\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      scrollToBottom();\n    },\n    onError: (error) => {\n      toast({\n        title: \"AI assistance failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    \n    assistMutation.mutate({\n      question: inputValue,\n      context: context || undefined,\n      aiProvider\n    });\n\n    setInputValue(\"\");\n    scrollToBottom();\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setInputValue(suggestion);\n  };\n\n  const handleQuickPrompt = (prompt: string) => {\n    setInputValue(prompt);\n  };\n\n  const handleCopyMessage = async (content: string) => {\n    try {\n      await navigator.clipboard.writeText(content);\n      toast({\n        title: \"Message copied!\",\n        description: \"The message has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy message to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const scrollToBottom = () => {\n    setTimeout(() => {\n      if (scrollAreaRef.current) {\n        scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n      }\n    }, 100);\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('en-US', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-accent-purple to-accent-cyan rounded-lg flex items-center justify-center mr-4\">\n                <Bot className=\"text-white h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">AI Assistant</h1>\n                <p className=\"text-github-text-secondary\">\n                  Get intelligent help with coding, music creation, and CodeBeat fusion\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\">24/7 Available</Badge>\n              <Badge variant=\"secondary\">Multi-Domain Expert</Badge>\n              <Badge variant=\"secondary\">Context-Aware</Badge>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            {/* Chat Interface */}\n            <div className=\"lg:col-span-3\">\n              <Card className=\"bg-github-secondary border-github-border h-[600px] flex flex-col\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <MessageCircle className=\"mr-2 h-5 w-5 text-accent-cyan\" />\n                    Chat with AI Assistant\n                  </CardTitle>\n                </CardHeader>\n                \n                <CardContent className=\"flex-1 flex flex-col\">\n                  {/* Messages */}\n                  <ScrollArea ref={scrollAreaRef} className=\"flex-1 pr-4\">\n                    <div className=\"space-y-4\">\n                      {messages.map((message) => (\n                        <div\n                          key={message.id}\n                          className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                        >\n                          <div\n                            className={`max-w-[80%] rounded-lg p-3 ${\n                              message.type === 'user'\n                                ? 'bg-accent-purple text-white'\n                                : 'bg-github-dark border border-github-border'\n                            }`}\n                          >\n                            <div className=\"flex items-start space-x-2\">\n                              {message.type === 'assistant' && (\n                                <Bot className=\"h-4 w-4 text-accent-cyan mt-1 flex-shrink-0\" />\n                              )}\n                              <div className=\"flex-1\">\n                                <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                                \n                                {message.suggestions && message.suggestions.length > 0 && (\n                                  <div className=\"mt-3 space-y-2\">\n                                    <p className=\"text-xs text-github-text-secondary\">Suggestions:</p>\n                                    <div className=\"flex flex-wrap gap-2\">\n                                      {message.suggestions.map((suggestion, index) => (\n                                        <Button\n                                          key={index}\n                                          size=\"sm\"\n                                          variant=\"outline\"\n                                          onClick={() => handleSuggestionClick(suggestion)}\n                                          className=\"text-xs\"\n                                        >\n                                          {suggestion}\n                                        </Button>\n                                      ))}\n                                    </div>\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex items-center justify-between mt-2\">\n                              <span className=\"text-xs text-github-text-secondary\">\n                                {formatTime(message.timestamp)}\n                              </span>\n                              <div className=\"flex space-x-1\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => handleCopyMessage(message.content)}\n                                  className=\"h-6 w-6 p-0\"\n                                >\n                                  <Copy className=\"h-3 w-3\" />\n                                </Button>\n                                {message.type === 'assistant' && (\n                                  <>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      className=\"h-6 w-6 p-0\"\n                                    >\n                                      <ThumbsUp className=\"h-3 w-3\" />\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      className=\"h-6 w-6 p-0\"\n                                    >\n                                      <ThumbsDown className=\"h-3 w-3\" />\n                                    </Button>\n                                  </>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {assistMutation.isPending && (\n                        <div className=\"flex justify-start\">\n                          <div className=\"bg-github-dark border border-github-border rounded-lg p-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Bot className=\"h-4 w-4 text-accent-cyan animate-pulse\" />\n                              <div className=\"flex space-x-1\">\n                                <div className=\"w-2 h-2 bg-accent-cyan rounded-full animate-bounce\"></div>\n                                <div className=\"w-2 h-2 bg-accent-cyan rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                                <div className=\"w-2 h-2 bg-accent-cyan rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </ScrollArea>\n\n                  <Separator className=\"my-4\" />\n\n                  {/* Input */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        value={inputValue}\n                        onChange={(e) => setInputValue(e.target.value)}\n                        placeholder=\"Ask me anything about coding, music, or CodeBeat fusion...\"\n                        className=\"flex-1 bg-github-dark border-github-border\"\n                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                      />\n                      <Button\n                        onClick={handleSendMessage}\n                        disabled={!inputValue.trim() || assistMutation.isPending}\n                        className=\"bg-gradient-to-r from-accent-cyan to-accent-purple\"\n                      >\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    \n                    <Input\n                      value={context}\n                      onChange={(e) => setContext(e.target.value)}\n                      placeholder=\"Add context (optional): current project, specific technology, etc.\"\n                      className=\"bg-github-dark border-github-border text-sm\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* AI Provider Selector */}\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">AI Provider</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <AIProviderSelector\n                    value={aiProvider}\n                    onValueChange={setAiProvider}\n                  />\n                </CardContent>\n              </Card>\n\n              {/* Quick Prompts */}\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm flex items-center\">\n                    <Lightbulb className=\"mr-2 h-4 w-4 text-yellow-500\" />\n                    Quick Prompts\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {QUICK_PROMPTS.map((prompt, index) => (\n                      <Button\n                        key={index}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleQuickPrompt(prompt)}\n                        className=\"w-full justify-start text-xs h-auto py-2 whitespace-normal\"\n                      >\n                        {prompt}\n                      </Button>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Capabilities */}\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">AI Capabilities</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Code className=\"h-4 w-4 text-accent-purple\" />\n                      <span className=\"text-sm\">Code debugging & optimization</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Music className=\"h-4 w-4 text-accent-pink\" />\n                      <span className=\"text-sm\">Music theory & composition</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Zap className=\"h-4 w-4 text-accent-cyan\" />\n                      <span className=\"text-sm\">CodeBeat fusion guidance</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Bot className=\"h-4 w-4 text-accent-purple\" />\n                      <span className=\"text-sm\">Technical explanations</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Conversations */}\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm flex items-center\">\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    Recent Topics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {EXAMPLE_CONVERSATIONS.map((conv, index) => (\n                      <div key={index} className=\"p-2 bg-github-dark rounded-lg\">\n                        <h4 className=\"font-medium text-sm\">{conv.title}</h4>\n                        <p className=\"text-xs text-github-text-secondary mt-1\">\n                          {conv.preview}\n                        </p>\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {conv.tags.map((tag, tagIndex) => (\n                            <Badge key={tagIndex} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Tips */}\n              <Card className=\"bg-accent-cyan/10 border-accent-cyan/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm text-accent-cyan\">üí° Pro Tips</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>‚Ä¢ Be specific about your coding language</li>\n                    <li>‚Ä¢ Include error messages for debugging</li>\n                    <li>‚Ä¢ Mention your musical background level</li>\n                    <li>‚Ä¢ Use context field for better responses</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17955},"client/src/pages/beat-studio.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Play, Pause, Square, Download, Share, Volume2, Loader2, Music } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { beatAPI } from \"@/lib/api\";\nimport { audioManager } from \"@/lib/audio\";\nimport { Waveform } from \"@/components/ui/waveform\";\nimport { AudioVisualizer } from \"@/components/ui/audio-visualizer\";\nimport { AIProviderSelector } from \"@/components/ui/ai-provider-selector\";\n\nconst GENRES = [\n  \"Hip-Hop\", \"Electronic\", \"Pop\", \"Rock\", \"R&B\", \"Trap\", \"House\", \"Techno\",\n  \"Dubstep\", \"Drum & Bass\", \"Jazz\", \"Funk\", \"Reggae\", \"Latin\"\n];\n\nconst DRUM_SAMPLES = [\n  \"Kick\", \"Snare\", \"Hi-Hat\", \"Open Hat\", \"Crash\", \"Ride\", \"Tom\", \"Clap\"\n];\n\nexport default function BeatStudio() {\n  const [genre, setGenre] = useState(\"\");\n  const [bpm, setBpm] = useState([120]);\n  const [duration, setDuration] = useState([16]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [generatedBeat, setGeneratedBeat] = useState<any>(null);\n  const [beatPattern, setBeatPattern] = useState<number[]>([]);\n  const [selectedSample, setSelectedSample] = useState(\"Kick\");\n  const [volume, setVolume] = useState([75]);\n  const [aiProvider, setAiProvider] = useState(\"grok\");\n  const [audioInitialized, setAudioInitialized] = useState(false);\n  const { toast } = useToast();\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  const generateMutation = useMutation({\n    mutationFn: beatAPI.generate,\n    onSuccess: (data) => {\n      setGeneratedBeat(data);\n      setBeatPattern(data.pattern);\n      toast({\n        title: \"Beat generated!\",\n        description: `Created a ${genre} beat at ${bpm[0]} BPM`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!genre) {\n      toast({\n        title: \"No genre selected\",\n        description: \"Please select a genre for your beat\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate({\n      genre,\n      bpm: bpm[0],\n      duration: duration[0],\n      aiProvider: aiProvider as \"grok\" | \"gemini\"\n    });\n  };\n\n  const handleInitializeAudio = async () => {\n    try {\n      await audioManager.initialize();\n      setAudioInitialized(true);\n      toast({\n        title: \"Audio ready\",\n        description: \"Audio system initialized successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Audio initialization failed\",\n        description: \"Please check your browser audio settings\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePlay = async () => {\n    if (!audioInitialized) {\n      toast({\n        title: \"Audio not ready\",\n        description: \"Click 'Start Audio' first to enable sound\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!generatedBeat) {\n      toast({\n        title: \"No beat to play\",\n        description: \"Generate a beat first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (isPlaying) {\n      audioManager.stop();\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      setIsPlaying(false);\n    } else {\n      try {\n        console.log(\"Starting audio playback...\");\n        console.log(\"Generated beat:\", generatedBeat);\n        \n        await audioManager.playBeat(generatedBeat.pattern, generatedBeat.samples || [\"kick\", \"snare\", \"hihat\"], bpm[0]);\n        setIsPlaying(true);\n        \n        toast({\n          title: \"Playing beat\",\n          description: `${generatedBeat.description || \"Beat is now playing\"}`,\n        });\n        \n        // Auto-stop after 8 seconds for testing\n        setTimeout(() => {\n          if (isPlaying) {\n            audioManager.stop();\n            setIsPlaying(false);\n            console.log(\"Auto-stopped beat playback\");\n          }\n        }, 8000);\n        \n      } catch (error) {\n        console.error(\"Playback error:\", error);\n        toast({\n          title: \"Playback failed\",\n          description: `Error: ${error.message}`,\n          variant: \"destructive\",\n        });\n        setIsPlaying(false);\n      }\n    }\n  };\n\n  const handlePatternClick = (index: number) => {\n    const newPattern = [...beatPattern];\n    newPattern[index] = newPattern[index] ? 0 : 1;\n    setBeatPattern(newPattern);\n    if (generatedBeat) {\n      setGeneratedBeat({ ...generatedBeat, pattern: newPattern });\n    }\n  };\n\n  const clearPattern = () => {\n    setBeatPattern(Array(16).fill(0));\n    if (generatedBeat) {\n      setGeneratedBeat({ ...generatedBeat, pattern: Array(16).fill(0) });\n    }\n  };\n\n  const randomizePattern = () => {\n    const newPattern = Array(16).fill(0).map(() => Math.random() > 0.6 ? 1 : 0);\n    setBeatPattern(newPattern);\n    if (generatedBeat) {\n      setGeneratedBeat({ ...generatedBeat, pattern: newPattern });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-accent-cyan/20 rounded-lg flex items-center justify-center mr-4\">\n                <Music className=\"text-accent-cyan h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">Beat Studio</h1>\n                <p className=\"text-github-text-secondary\">\n                  Create and edit professional beats with AI assistance\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\">AI-Generated</Badge>\n              <Badge variant=\"secondary\">Real-time Editing</Badge>\n              <Badge variant=\"secondary\">Multiple Genres</Badge>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"generate\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"generate\">Generate Beat</TabsTrigger>\n              <TabsTrigger value=\"edit\">Edit Pattern</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"generate\">\n              {/* Beat Parameters */}\n              <Card className=\"bg-github-secondary border-github-border mb-6\">\n                <CardHeader>\n                  <CardTitle>Beat Parameters</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Genre</label>\n                      <Select value={genre} onValueChange={setGenre}>\n                        <SelectTrigger className=\"bg-github-dark border-github-border\">\n                          <SelectValue placeholder=\"Select genre\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {GENRES.map((g) => (\n                            <SelectItem key={g} value={g}>\n                              {g}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">\n                        BPM: {bpm[0]}\n                      </label>\n                      <Slider\n                        value={bpm}\n                        onValueChange={setBpm}\n                        max={200}\n                        min={60}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">\n                        Duration: {duration[0]} bars\n                      </label>\n                      <Slider\n                        value={duration}\n                        onValueChange={setDuration}\n                        max={32}\n                        min={4}\n                        step={4}\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">AI Provider</label>\n                      <AIProviderSelector\n                        value={aiProvider}\n                        onValueChange={setAiProvider}\n                      />\n                    </div>\n                  </div>\n\n                  <Button\n                    onClick={handleGenerate}\n                    disabled={generateMutation.isPending}\n                    className=\"w-full bg-gradient-to-r from-accent-cyan to-accent-purple\"\n                  >\n                    {generateMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Generating Beat...\n                      </>\n                    ) : (\n                      <>\n                        <Music className=\"mr-2 h-4 w-4\" />\n                        Generate Beat\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Beat Preview */}\n              {generatedBeat && (\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card className=\"bg-github-secondary border-github-border\">\n                    <CardHeader>\n                      <CardTitle>Beat Preview</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <AudioVisualizer \n                          isPlaying={isPlaying}\n                          className=\"h-32\"\n                        />\n                        \n                        {/* Audio Initialization */}\n                        {!audioInitialized && (\n                          <div className=\"bg-accent-purple/10 border border-accent-purple/20 rounded-lg p-4 mb-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <h4 className=\"font-medium text-accent-purple\">Audio Setup Required</h4>\n                                <p className=\"text-sm text-github-text-secondary\">Click to enable audio playback</p>\n                              </div>\n                              <Button\n                                onClick={handleInitializeAudio}\n                                className=\"bg-accent-purple hover:bg-accent-purple/80\"\n                              >\n                                <Volume2 className=\"mr-2 h-4 w-4\" />\n                                Start Audio\n                              </Button>\n                            </div>\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              onClick={handlePlay}\n                              disabled={!audioInitialized}\n                              className=\"w-12 h-12 rounded-full bg-accent-cyan/20 hover:bg-accent-cyan/30 disabled:opacity-50\"\n                            >\n                              {isPlaying ? (\n                                <Pause className=\"h-5 w-5 text-accent-cyan\" />\n                              ) : (\n                                <Play className=\"h-5 w-5 text-accent-cyan\" />\n                              )}\n                            </Button>\n                            <Button\n                              onClick={() => {\n                                audioManager.stop();\n                                setIsPlaying(false);\n                              }}\n                              variant=\"outline\"\n                              size=\"sm\"\n                              disabled={!audioInitialized}\n                            >\n                              <Square className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Volume2 className=\"h-4 w-4 text-github-text-secondary\" />\n                            <Slider\n                              value={volume}\n                              onValueChange={setVolume}\n                              max={100}\n                              min={0}\n                              className=\"w-20\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                            <Download className=\"h-4 w-4 mr-1\" />\n                            Export\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                            <Share className=\"h-4 w-4 mr-1\" />\n                            Share\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-github-secondary border-github-border\">\n                    <CardHeader>\n                      <CardTitle>Beat Information</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h3 className=\"font-medium mb-2\">Samples Used</h3>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {generatedBeat.samples.map((sample: string, index: number) => (\n                              <Badge key={index} variant=\"secondary\">\n                                {sample}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div>\n                          <h3 className=\"font-medium mb-2\">Pattern</h3>\n                          <div className=\"grid grid-cols-8 gap-1\">\n                            {generatedBeat.pattern.slice(0, 16).map((beat: number, index: number) => (\n                              <div\n                                key={index}\n                                className={`w-8 h-8 rounded border-2 flex items-center justify-center text-xs font-bold ${\n                                  beat ? 'bg-accent-cyan border-accent-cyan text-github-dark' : 'border-github-border'\n                                }`}\n                              >\n                                {index + 1}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div>\n                          <h3 className=\"font-medium mb-2\">Description</h3>\n                          <p className=\"text-github-text-secondary text-sm\">\n                            {generatedBeat.description}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"edit\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Pattern Editor */}\n                <div className=\"lg:col-span-2\">\n                  <Card className=\"bg-github-secondary border-github-border\">\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle>Pattern Editor</CardTitle>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={clearPattern}>\n                            Clear\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" onClick={randomizePattern}>\n                            Random\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {DRUM_SAMPLES.map((sample, sampleIndex) => (\n                          <div key={sample} className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-sm font-medium\">{sample}</span>\n                              <Button\n                                size=\"sm\"\n                                variant={selectedSample === sample ? \"default\" : \"outline\"}\n                                onClick={() => setSelectedSample(sample)}\n                                className=\"text-xs\"\n                              >\n                                Select\n                              </Button>\n                            </div>\n                            <div className=\"grid grid-cols-16 gap-1\">\n                              {Array(16).fill(0).map((_, index) => (\n                                <button\n                                  key={index}\n                                  onClick={() => handlePatternClick(index)}\n                                  className={`w-6 h-6 rounded border-2 transition-colors ${\n                                    beatPattern[index] && selectedSample === sample\n                                      ? 'bg-accent-cyan border-accent-cyan'\n                                      : 'border-github-border hover:border-accent-cyan/50'\n                                  } ${index % 4 === 0 ? 'border-l-4 border-l-accent-pink' : ''}`}\n                                />\n                              ))}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Controls */}\n                <div className=\"space-y-4\">\n                  <Card className=\"bg-github-secondary border-github-border\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Playback Controls</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            onClick={handlePlay}\n                            className=\"flex-1 bg-accent-cyan/20 hover:bg-accent-cyan/30\"\n                          >\n                            {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              audioManager.stop();\n                              setIsPlaying(false);\n                            }}\n                            variant=\"outline\"\n                          >\n                            <Square className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n\n                        <div>\n                          <label className=\"text-xs font-medium\">Volume</label>\n                          <Slider\n                            value={volume}\n                            onValueChange={setVolume}\n                            max={100}\n                            min={0}\n                            className=\"mt-2\"\n                          />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-github-secondary border-github-border\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm\">Sample Selection</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {DRUM_SAMPLES.map((sample) => (\n                          <Button\n                            key={sample}\n                            size=\"sm\"\n                            variant={selectedSample === sample ? \"default\" : \"outline\"}\n                            onClick={() => setSelectedSample(sample)}\n                            className=\"w-full justify-start text-xs\"\n                          >\n                            {sample}\n                          </Button>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-accent-cyan/10 border-accent-cyan/20\">\n                    <CardHeader>\n                      <CardTitle className=\"text-sm text-accent-cyan\">üí° Beat Tips</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-1 text-xs\">\n                        <li>‚Ä¢ Click grid squares to toggle beats</li>\n                        <li>‚Ä¢ Use kick on 1 and 3 for foundation</li>\n                        <li>‚Ä¢ Add snare on 2 and 4 for rhythm</li>\n                        <li>‚Ä¢ Fill with hi-hats for texture</li>\n                      </ul>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22425},"client/src/pages/code-translator.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowRight, Code, Copy, Download, Share, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { codeAPI } from \"@/lib/api\";\nimport { CodeEditor } from \"@/components/ui/code-editor\";\nimport { AIProviderSelector } from \"@/components/ui/ai-provider-selector\";\n\nconst PROGRAMMING_LANGUAGES = [\n  \"JavaScript\", \"TypeScript\", \"Python\", \"Java\", \"C#\", \"C++\", \"Go\", \"Rust\", \n  \"PHP\", \"Ruby\", \"Swift\", \"Kotlin\", \"Dart\", \"Scala\", \"R\", \"MATLAB\"\n];\n\nexport default function CodeTranslator() {\n  const [sourceCode, setSourceCode] = useState(\"\");\n  const [sourceLanguage, setSourceLanguage] = useState(\"\");\n  const [targetLanguage, setTargetLanguage] = useState(\"\");\n  const [translatedCode, setTranslatedCode] = useState(\"\");\n  const [explanation, setExplanation] = useState(\"\");\n  const [aiProvider, setAiProvider] = useState(\"grok\");\n  const { toast } = useToast();\n\n  const translateMutation = useMutation({\n    mutationFn: codeAPI.translate,\n    onSuccess: (data) => {\n      setTranslatedCode(data.translatedCode);\n      setExplanation(data.explanation);\n      toast({\n        title: \"Translation complete!\",\n        description: `Successfully translated from ${sourceLanguage} to ${targetLanguage}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Translation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTranslate = () => {\n    if (!sourceCode.trim()) {\n      toast({\n        title: \"No code provided\",\n        description: \"Please enter some code to translate\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!sourceLanguage || !targetLanguage) {\n      toast({\n        title: \"Languages not selected\",\n        description: \"Please select both source and target languages\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (sourceLanguage === targetLanguage) {\n      toast({\n        title: \"Same language selected\",\n        description: \"Source and target languages cannot be the same\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    translateMutation.mutate({\n      sourceCode,\n      sourceLanguage,\n      targetLanguage,\n      aiProvider\n    });\n  };\n\n  const handleCopy = async (code: string) => {\n    try {\n      await navigator.clipboard.writeText(code);\n      toast({\n        title: \"Code copied!\",\n        description: \"The code has been copied to your clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy code to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const exampleCodes = {\n    JavaScript: `function fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}`,\n    Python: `def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)`,\n    Java: `public static int fibonacci(int n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}`\n  };\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-accent-purple/20 rounded-lg flex items-center justify-center mr-4\">\n                <Code className=\"text-accent-purple h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">Code Translator</h1>\n                <p className=\"text-github-text-secondary\">\n                  Transform code between programming languages with AI precision\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\">50+ Languages</Badge>\n              <Badge variant=\"secondary\">AI-Powered</Badge>\n              <Badge variant=\"secondary\">Context-Aware</Badge>\n            </div>\n          </div>\n\n          {/* AI Provider and Language Selection */}\n          <Card className=\"bg-github-secondary border-github-border mb-6\">\n            <CardHeader>\n              <CardTitle>Configuration</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-4\">\n                <label className=\"text-sm font-medium mb-2 block\">AI Provider</label>\n                <AIProviderSelector \n                  value={aiProvider} \n                  onValueChange={setAiProvider}\n                  className=\"mb-4\"\n                />\n              </div>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-center\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Source Language</label>\n                  <Select value={sourceLanguage} onValueChange={setSourceLanguage}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select source language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {PROGRAMMING_LANGUAGES.map((lang) => (\n                        <SelectItem key={lang} value={lang}>\n                          {lang}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex justify-center\">\n                  <ArrowRight className=\"h-6 w-6 text-accent-cyan\" />\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Target Language</label>\n                  <Select value={targetLanguage} onValueChange={setTargetLanguage}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select target language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {PROGRAMMING_LANGUAGES.map((lang) => (\n                        <SelectItem key={lang} value={lang}>\n                          {lang}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Code Input/Output */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            {/* Source Code */}\n            <Card className=\"bg-github-secondary border-github-border\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Source Code</CardTitle>\n                  {sourceLanguage && (\n                    <div className=\"flex gap-2\">\n                      {Object.keys(exampleCodes).includes(sourceLanguage) && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setSourceCode(exampleCodes[sourceLanguage as keyof typeof exampleCodes])}\n                        >\n                          Load Example\n                        </Button>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  value={sourceCode}\n                  onChange={(e) => setSourceCode(e.target.value)}\n                  placeholder=\"Enter your code here...\"\n                  className=\"min-h-64 font-mono bg-github-dark border-github-border resize-none\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Translated Code */}\n            <Card className=\"bg-github-secondary border-github-border\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Translated Code</CardTitle>\n                  {translatedCode && (\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleCopy(translatedCode)}\n                      >\n                        <Copy className=\"h-4 w-4 mr-1\" />\n                        Copy\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-1\" />\n                        Download\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Share className=\"h-4 w-4 mr-1\" />\n                        Share\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {translatedCode ? (\n                  <CodeEditor\n                    code={translatedCode}\n                    language={targetLanguage?.toLowerCase() || \"text\"}\n                    readOnly\n                    className=\"min-h-64\"\n                  />\n                ) : (\n                  <div className=\"min-h-64 bg-github-dark border border-github-border rounded-lg flex items-center justify-center text-github-text-secondary\">\n                    Translated code will appear here\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Translation Button */}\n          <div className=\"flex justify-center mb-6\">\n            <Button\n              onClick={handleTranslate}\n              disabled={translateMutation.isPending}\n              className=\"px-8 py-3 bg-gradient-purple-pink text-white font-semibold\"\n              size=\"lg\"\n            >\n              {translateMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Translating...\n                </>\n              ) : (\n                <>\n                  <Code className=\"mr-2 h-5 w-5\" />\n                  Translate Code\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Explanation */}\n          {explanation && (\n            <Card className=\"bg-github-secondary border-github-border\">\n              <CardHeader>\n                <CardTitle>Translation Explanation</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose prose-invert max-w-none\">\n                  <p className=\"text-github-text-secondary\">{explanation}</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Tips */}\n          <Card className=\"bg-accent-purple/10 border-accent-purple/20 mt-6\">\n            <CardHeader>\n              <CardTitle className=\"text-accent-purple\">üí° Translation Tips</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-2 text-sm\">\n                <li>‚Ä¢ Provide complete, well-structured code for best results</li>\n                <li>‚Ä¢ Include comments to help the AI understand context</li>\n                <li>‚Ä¢ Review translated code for language-specific optimizations</li>\n                <li>‚Ä¢ Consider testing the translated code in your target environment</li>\n              </ul>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11873},"client/src/pages/codebeat-studio.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Zap, \n  Code, \n  Music, \n  Play, \n  Pause, \n  ArrowRight,\n  Download,\n  Share,\n  Loader2,\n  Volume2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { codeBeatAPI } from \"@/lib/api\";\nimport { audioManager } from \"@/lib/audio\";\nimport { CodeEditor } from \"@/components/ui/code-editor\";\nimport { Waveform } from \"@/components/ui/waveform\";\nimport { AudioVisualizer } from \"@/components/ui/audio-visualizer\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { AIProviderSelector } from \"@/components/ui/ai-provider-selector\";\n\nconst PROGRAMMING_LANGUAGES = [\n  \"JavaScript\", \"TypeScript\", \"Python\", \"Java\", \"C#\", \"C++\", \"Go\", \"Rust\", \n  \"PHP\", \"Ruby\", \"Swift\", \"Kotlin\", \"Dart\", \"Scala\"\n];\n\nconst MUSICAL_KEYS = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\nexport default function CodeBeatStudio() {\n  const [sourceCode, setSourceCode] = useState(\"\");\n  const [language, setLanguage] = useState(\"\");\n  const [musicResult, setMusicResult] = useState<any>(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolume] = useState([75]);\n  const [aiProvider, setAiProvider] = useState(\"grok\");\n  const { toast } = useToast();\n\n  const convertMutation = useMutation({\n    mutationFn: codeBeatAPI.convert,\n    onSuccess: (data) => {\n      setMusicResult(data);\n      toast({\n        title: \"Code converted to music!\",\n        description: `Created a musical composition in ${data.key} at ${data.tempo} BPM`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Conversion failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConvert = () => {\n    if (!sourceCode.trim()) {\n      toast({\n        title: \"No code provided\",\n        description: \"Please enter some code to convert\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!language) {\n      toast({\n        title: \"No language selected\",\n        description: \"Please select the programming language\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    convertMutation.mutate({\n      code: sourceCode,\n      language,\n      aiProvider\n    });\n  };\n\n  const handlePlay = async () => {\n    if (!musicResult) return;\n\n    if (isPlaying) {\n      audioManager.stop();\n      setIsPlaying(false);\n    } else {\n      try {\n        await audioManager.playMelody(musicResult.melody, musicResult.tempo);\n        setIsPlaying(true);\n        \n        // Auto-stop after melody completes\n        setTimeout(() => {\n          setIsPlaying(false);\n        }, (musicResult.melody.length * (60 / musicResult.tempo) * 0.5) * 1000);\n      } catch (error) {\n        toast({\n          title: \"Playback failed\",\n          description: \"Could not play the generated music\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const exampleCodes = {\n    JavaScript: `function fibonacci(n) {\n  if (n <= 1) return n;\n  let a = 0, b = 1;\n  for (let i = 2; i <= n; i++) {\n    [a, b] = [b, a + b];\n  }\n  return b;\n}\n\n// Recursive pattern creates ascending melody\n// Loop structure adds rhythmic complexity`,\n\n    Python: `import random\n\ndef generate_pattern(size):\n    pattern = []\n    for i in range(size):\n        if i % 2 == 0:\n            pattern.append(random.choice([1, 2, 3]))\n        else:\n            pattern.append(0)\n    return pattern\n\n# Conditional logic creates syncopated rhythm\n# Random elements add harmonic variation`,\n\n    Java: `public class MelodyGenerator {\n    private int[] notes = {60, 62, 64, 65, 67, 69, 71, 72};\n    \n    public void playScale() {\n        for (int note : notes) {\n            System.out.println(\"Playing note: \" + note);\n            Thread.sleep(250);\n        }\n    }\n}\n\n// Object structure maps to chord progressions\n// Array iteration creates melodic sequences`\n  };\n\n  const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const getMIDINoteName = (midiNote: number) => {\n    const octave = Math.floor(midiNote / 12) - 1;\n    const noteIndex = midiNote % 12;\n    return `${noteNames[noteIndex]}${octave}`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-accent-cyan via-accent-purple to-accent-pink rounded-lg flex items-center justify-center mr-4\">\n                <Zap className=\"text-white h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">\n                  Code<span className=\"text-accent-cyan\">Beat</span> Studio\n                </h1>\n                <p className=\"text-github-text-secondary\">\n                  Transform your code into musical compositions with AI magic\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\">Revolutionary</Badge>\n              <Badge variant=\"secondary\">Code Analysis</Badge>\n              <Badge variant=\"secondary\">Musical Mapping</Badge>\n              <Badge variant=\"secondary\">AI-Powered</Badge>\n            </div>\n          </div>\n\n          {/* Conversion Interface */}\n          <Card className=\"bg-github-secondary border-github-border mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Code className=\"mr-2 h-5 w-5 text-accent-purple\" />\n                Code Input\n                <ArrowRight className=\"mx-4 h-5 w-5 text-accent-cyan\" />\n                <Music className=\"mr-2 h-5 w-5 text-accent-pink\" />\n                Music Output\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Code Input */}\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Programming Language</label>\n                      <Select value={language} onValueChange={setLanguage}>\n                        <SelectTrigger className=\"bg-github-dark border-github-border\">\n                          <SelectValue placeholder=\"Select language\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {PROGRAMMING_LANGUAGES.map((lang) => (\n                            <SelectItem key={lang} value={lang}>\n                              {lang}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">AI Provider</label>\n                      <AIProviderSelector\n                        value={aiProvider}\n                        onValueChange={setAiProvider}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Source Code</label>\n                    <Textarea\n                      value={sourceCode}\n                      onChange={(e) => setSourceCode(e.target.value)}\n                      placeholder=\"Enter your code here...\"\n                      className=\"min-h-64 font-mono bg-github-dark border-github-border resize-none\"\n                    />\n                  </div>\n\n                  {language && exampleCodes[language as keyof typeof exampleCodes] && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setSourceCode(exampleCodes[language as keyof typeof exampleCodes])}\n                    >\n                      Load Example Code\n                    </Button>\n                  )}\n                </div>\n\n                {/* Music Output */}\n                <div className=\"space-y-4\">\n                  {musicResult ? (\n                    <>\n                      <div className=\"space-y-4\">\n                        <Card className=\"bg-github-dark border-github-border\">\n                          <CardContent className=\"p-4\">\n                            <AudioVisualizer \n                              isPlaying={isPlaying}\n                              className=\"h-32 mb-4\"\n                            />\n                            \n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <Button\n                                  onClick={handlePlay}\n                                  className=\"w-12 h-12 rounded-full bg-accent-pink/20 hover:bg-accent-pink/30\"\n                                >\n                                  {isPlaying ? (\n                                    <Pause className=\"h-5 w-5 text-accent-pink\" />\n                                  ) : (\n                                    <Play className=\"h-5 w-5 text-accent-pink\" />\n                                  )}\n                                </Button>\n                                <div className=\"text-sm\">\n                                  <div className=\"text-white\">Generated Composition</div>\n                                  <div className=\"text-github-text-secondary text-xs\">\n                                    {musicResult.tempo} BPM ‚Ä¢ {musicResult.key}\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              <div className=\"flex items-center space-x-2\">\n                                <Volume2 className=\"h-4 w-4 text-github-text-secondary\" />\n                                <Slider\n                                  value={volume}\n                                  onValueChange={setVolume}\n                                  max={100}\n                                  min={0}\n                                  className=\"w-20\"\n                                />\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <Card className=\"bg-github-dark border-github-border\">\n                            <CardContent className=\"p-4\">\n                              <h3 className=\"font-medium mb-2 text-accent-cyan\">Musical Key</h3>\n                              <Badge variant=\"outline\" className=\"text-accent-cyan\">\n                                {musicResult.key}\n                              </Badge>\n                            </CardContent>\n                          </Card>\n\n                          <Card className=\"bg-github-dark border-github-border\">\n                            <CardContent className=\"p-4\">\n                              <h3 className=\"font-medium mb-2 text-accent-pink\">Tempo</h3>\n                              <Badge variant=\"outline\" className=\"text-accent-pink\">\n                                {musicResult.tempo} BPM\n                              </Badge>\n                            </CardContent>\n                          </Card>\n                        </div>\n\n                        <Card className=\"bg-github-dark border-github-border\">\n                          <CardContent className=\"p-4\">\n                            <h3 className=\"font-medium mb-2\">Melody Pattern</h3>\n                            <div className=\"grid grid-cols-8 gap-1\">\n                              {musicResult.melody.slice(0, 16).map((note: number, index: number) => (\n                                <div\n                                  key={index}\n                                  className=\"p-2 bg-accent-purple/20 rounded text-center text-xs font-mono\"\n                                  title={`MIDI Note ${note}`}\n                                >\n                                  {getMIDINoteName(note)}\n                                </div>\n                              ))}\n                            </div>\n                          </CardContent>\n                        </Card>\n\n                          <Card className=\"bg-github-dark border-github-border\">\n                            <CardContent className=\"p-4\">\n                              <h3 className=\"font-medium mb-2\">Rhythm Pattern</h3>\n                              <div className=\"grid grid-cols-16 gap-1\">\n                                {musicResult.rhythm.slice(0, 16).map((beat: number, index: number) => (\n                                  <div\n                                    key={index}\n                                    className={`w-4 h-4 rounded ${\n                                      beat ? 'bg-accent-cyan' : 'bg-github-border'\n                                    }`}\n                                  />\n                                ))}\n                              </div>\n                            </CardContent>\n                          </Card>\n                        </div>\n\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"outline\" className=\"flex-1\">\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Export MIDI\n                          </Button>\n                          <Button variant=\"outline\" className=\"flex-1\">\n                            <Share className=\"h-4 w-4 mr-2\" />\n                            Share\n                          </Button>\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"min-h-64 bg-github-dark border border-github-border rounded-lg flex items-center justify-center text-github-text-secondary\">\n                        Your musical composition will appear here\n                      </div>\n                    )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Convert Button */}\n          <div className=\"flex justify-center mb-6\">\n            <Button\n              onClick={handleConvert}\n              disabled={convertMutation.isPending}\n              className=\"px-8 py-3 bg-gradient-to-r from-accent-cyan via-accent-purple to-accent-pink text-white font-semibold\"\n              size=\"lg\"\n            >\n              {convertMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Converting Code to Music...\n                </>\n              ) : (\n                <>\n                  <Zap className=\"mr-2 h-5 w-5\" />\n                  Transform Code to Music\n                </>\n              )}\n            </Button>\n          </div>\n\n          {/* Explanation */}\n          {musicResult && (\n            <Card className=\"bg-github-secondary border-github-border mb-6\">\n              <CardHeader>\n                <CardTitle>Conversion Analysis</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"prose prose-invert max-w-none\">\n                  <p className=\"text-github-text-secondary\">{musicResult.description}</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* How It Works */}\n          <Card className=\"bg-accent-cyan/10 border-accent-cyan/20\">\n            <CardHeader>\n              <CardTitle className=\"text-accent-cyan\">üéµ How CodeBeat Fusion Works</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-sm\">\n                <div>\n                  <h3 className=\"font-medium mb-2 text-accent-purple\">1. Code Analysis</h3>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>‚Ä¢ Analyzes code structure and complexity</li>\n                    <li>‚Ä¢ Identifies patterns and loops</li>\n                    <li>‚Ä¢ Maps function calls to melodic phrases</li>\n                    <li>‚Ä¢ Converts variables to harmonic elements</li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"font-medium mb-2 text-accent-pink\">2. Musical Mapping</h3>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>‚Ä¢ Conditional statements ‚Üí chord changes</li>\n                    <li>‚Ä¢ Loops ‚Üí repeating musical patterns</li>\n                    <li>‚Ä¢ Function depth ‚Üí musical octaves</li>\n                    <li>‚Ä¢ Code complexity ‚Üí rhythmic density</li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"font-medium mb-2 text-accent-cyan\">3. Composition</h3>\n                  <ul className=\"space-y-1 text-xs\">\n                    <li>‚Ä¢ Generates MIDI note sequences</li>\n                    <li>‚Ä¢ Creates rhythmic patterns</li>\n                    <li>‚Ä¢ Assigns appropriate tempo and key</li>\n                    <li>‚Ä¢ Produces playable musical output</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18071},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  Code, \n  Music, \n  Zap, \n  Bot, \n  TrendingUp, \n  Clock,\n  Star,\n  Play\n} from \"lucide-react\";\nimport { Waveform } from \"@/components/ui/waveform\";\n\nexport default function Dashboard() {\n  const quickActions = [\n    {\n      title: \"Translate Code\",\n      description: \"Convert code between languages\",\n      icon: Code,\n      href: \"/code-translator\",\n      color: \"purple\"\n    },\n    {\n      title: \"Generate Lyrics\",\n      description: \"Create AI-powered lyrics\",\n      icon: Music,\n      href: \"/lyric-lab\",\n      color: \"pink\"\n    },\n    {\n      title: \"Create Beat\",\n      description: \"Generate musical beats\",\n      icon: Music,\n      href: \"/beat-studio\",\n      color: \"cyan\"\n    },\n    {\n      title: \"CodeBeat Fusion\",\n      description: \"Transform code into music\",\n      icon: Zap,\n      href: \"/codebeat-studio\",\n      color: \"purple\"\n    }\n  ];\n\n  const recentProjects = [\n    {\n      name: \"React to Vue Translation\",\n      type: \"Code Translation\",\n      timestamp: \"2 hours ago\",\n      status: \"completed\"\n    },\n    {\n      name: \"Hip-Hop Beat Generation\",\n      type: \"Music Creation\",\n      timestamp: \"5 hours ago\",\n      status: \"completed\"\n    },\n    {\n      name: \"JavaScript Melody\",\n      type: \"CodeBeat Fusion\",\n      timestamp: \"1 day ago\",\n      status: \"completed\"\n    }\n  ];\n\n  const stats = [\n    { label: \"Code Translations\", value: \"24\", trend: \"+12%\" },\n    { label: \"Music Generations\", value: \"18\", trend: \"+8%\" },\n    { label: \"AI Assists\", value: \"42\", trend: \"+15%\" },\n    { label: \"CodeBeat Fusions\", value: \"6\", trend: \"+25%\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        {/* Main Content */}\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold mb-2\">\n              Welcome to <span className=\"text-gradient-purple-pink\">CodedSwitch</span>\n            </h1>\n            <p className=\"text-github-text-secondary\">\n              Your creative coding and music workspace\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {stats.map((stat, index) => (\n              <Card key={index} className=\"bg-github-secondary border-github-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-github-text-secondary text-sm\">{stat.label}</p>\n                      <p className=\"text-2xl font-bold\">{stat.value}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-1 text-green-500 text-sm\">\n                      <TrendingUp className=\"h-4 w-4\" />\n                      <span>{stat.trend}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"mb-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">Quick Actions</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {quickActions.map((action, index) => (\n                <Link key={index} href={action.href}>\n                  <Card className=\"bg-github-secondary border-github-border hover:border-accent-purple/50 transition-all duration-300 hover:scale-105 cursor-pointer\">\n                    <CardContent className=\"p-6 text-center\">\n                      <div className={`w-12 h-12 bg-accent-${action.color}/20 rounded-lg flex items-center justify-center mb-4 mx-auto`}>\n                        <action.icon className={`text-accent-${action.color} h-6 w-6`} />\n                      </div>\n                      <h3 className=\"font-semibold mb-2\">{action.title}</h3>\n                      <p className=\"text-github-text-secondary text-sm\">{action.description}</p>\n                    </CardContent>\n                  </Card>\n                </Link>\n              ))}\n            </div>\n          </div>\n\n          {/* Recent Activity */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Recent Projects */}\n            <Card className=\"bg-github-secondary border-github-border\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"mr-2 h-5 w-5\" />\n                  Recent Projects\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentProjects.map((project, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-github-dark rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{project.name}</p>\n                        <p className=\"text-github-text-secondary text-sm\">{project.type}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"flex items-center text-green-500 mb-1\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                          <span className=\"text-xs\">Completed</span>\n                        </div>\n                        <p className=\"text-github-text-secondary text-xs\">{project.timestamp}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <Button variant=\"outline\" className=\"w-full mt-4\">\n                  View All Projects\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* AI Assistant */}\n            <Card className=\"bg-github-secondary border-github-border\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bot className=\"mr-2 h-5 w-5 text-accent-cyan\" />\n                  AI Assistant\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-github-dark rounded-lg\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-accent-cyan/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"h-4 w-4 text-accent-cyan\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-github-text-secondary mb-2\">üí° AI Suggestion:</p>\n                        <p className=\"text-sm\">\n                          Try converting your Python sorting algorithm to a rhythmic pattern in the CodeBeat Studio!\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Quick Help Topics:</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                        Code Translation\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                        Music Theory\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                        Beat Creation\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n                <Link href=\"/ai-assistant\">\n                  <Button className=\"w-full mt-4 bg-gradient-to-r from-accent-cyan to-accent-purple\">\n                    Chat with AI Assistant\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Featured Tools */}\n          <div className=\"mt-8\">\n            <h2 className=\"text-xl font-semibold mb-4\">Featured Tools</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <Star className=\"text-yellow-500 h-5 w-5 mr-2\" />\n                    <span className=\"text-sm font-medium\">Most Popular</span>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Code Translator</h3>\n                  <p className=\"text-github-text-secondary text-sm mb-4\">\n                    Convert between 50+ programming languages with AI precision\n                  </p>\n                  <Link href=\"/code-translator\">\n                    <Button className=\"w-full\">Try Now</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <Waveform className=\"h-8\" bars={5} color=\"pink\" />\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Beat Studio</h3>\n                  <p className=\"text-github-text-secondary text-sm mb-4\">\n                    Create professional beats with AI-powered assistance\n                  </p>\n                  <Link href=\"/beat-studio\">\n                    <Button className=\"w-full\">Create Beat</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <Zap className=\"text-accent-cyan h-5 w-5 mr-2\" />\n                    <span className=\"text-sm font-medium\">Revolutionary</span>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">CodeBeat Fusion</h3>\n                  <p className=\"text-github-text-secondary text-sm mb-4\">\n                    Transform your code into musical compositions\n                  </p>\n                  <Link href=\"/codebeat-studio\">\n                    <Button className=\"w-full\">Fuse Now</Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10729},"client/src/pages/landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Code, Music, Zap, Bot, Github, Rocket, Play } from \"lucide-react\";\nimport { Waveform } from \"@/components/ui/waveform\";\nimport { AudioVisualizer } from \"@/components/ui/audio-visualizer\";\nimport { CodeEditor } from \"@/components/ui/code-editor\";\nimport { useState } from \"react\";\n\nexport default function Landing() {\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const sampleCode = `function createMelody(notes) {\n  const rhythm = [];\n  for (let i = 0; i < notes.length; i++) {\n    rhythm.push(notes[i] * 2);\n  }\n  return rhythm;\n}`;\n\n  const features = [\n    {\n      icon: Code,\n      title: \"Code Translator\",\n      description: \"Transform code between languages with AI precision\",\n      color: \"purple\"\n    },\n    {\n      icon: Music,\n      title: \"Music Studio\",\n      description: \"Create beats and melodies with AI collaboration\",\n      color: \"pink\"\n    },\n    {\n      icon: Zap,\n      title: \"CodeBeat Fusion\",\n      description: \"Turn your code into music and vice versa\",\n      color: \"cyan\"\n    },\n    {\n      icon: Bot,\n      title: \"AI Assistant\",\n      description: \"Get intelligent coding assistance and guidance\",\n      color: \"purple\"\n    }\n  ];\n\n  const techStack = [\n    { name: \"React\", icon: \"‚öõÔ∏è\" },\n    { name: \"Python\", icon: \"üêç\" },\n    { name: \"Docker\", icon: \"üê≥\" },\n    { name: \"Grok AI\", icon: \"üß†\" },\n    { name: \"Tone.js\", icon: \"üéµ\" },\n    { name: \"Redis\", icon: \"üìä\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text\">\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 px-4 sm:px-6 lg:px-8 relative overflow-hidden\">\n        {/* Background Effects */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 via-transparent to-pink-500/5\"></div>\n        <div className=\"absolute top-1/4 left-1/4 w-64 h-64 bg-purple-500/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-48 h-48 bg-pink-500/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n\n        <div className=\"max-w-7xl mx-auto relative\">\n          <div className=\"text-center mb-16\">\n            {/* Main Headline */}\n            <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-bold mb-6 leading-tight\">\n              <span className=\"text-gradient-full\">CodedSwitch</span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-github-text-secondary mb-4 max-w-3xl mx-auto\">\n              The world's first AI-powered platform that bridges{\" \"}\n              <span className=\"accent-purple font-mono\">code</span> and{\" \"}\n              <span className=\"accent-pink\">music</span> creation\n            </p>\n            <p className=\"text-lg text-github-text-secondary mb-12 max-w-2xl mx-auto\">\n              Switch seamlessly between programming languages, musical genres, and creative modes with AI assistance\n            </p>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4 mb-16\">\n              <Link href=\"/dashboard\">\n                <Button className=\"w-full sm:w-auto px-8 py-4 bg-gradient-purple-pink text-white font-semibold text-lg hover:scale-105 transition-transform shadow-lg\">\n                  <Rocket className=\"mr-2 h-5 w-5\" />\n                  Launch CodedSwitch\n                </Button>\n              </Link>\n              <Button \n                variant=\"outline\" \n                className=\"w-full sm:w-auto px-8 py-4 border-github-border hover:border-accent-cyan transition-colors\"\n                asChild\n              >\n                <a href=\"https://github.com/asume21/Codedswitch-minimal\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <Github className=\"mr-2 h-5 w-5\" />\n                  View on GitHub\n                </a>\n              </Button>\n            </div>\n\n            {/* Feature Preview Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n              {features.slice(0, 3).map((feature, index) => (\n                <Card key={index} className=\"bg-github-secondary/50 backdrop-blur-sm border-github-border hover:border-accent-purple/50 transition-all duration-300 hover:scale-105\">\n                  <CardContent className=\"p-6 text-center\">\n                    <div className={`w-12 h-12 bg-${feature.color}-500/20 rounded-lg flex items-center justify-center mb-4 mx-auto`}>\n                      <feature.icon className={`text-accent-${feature.color} h-6 w-6`} />\n                    </div>\n                    <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-github-text-secondary text-sm\">{feature.description}</p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Audio Waveform Visualization */}\n          <div className=\"flex justify-center\">\n            <Waveform className=\"opacity-60\" bars={9} />\n          </div>\n        </div>\n      </section>\n\n      {/* Features Overview */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-github-secondary/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              Powerful <span className=\"accent-purple\">AI Tools</span> for{\" \"}\n              <span className=\"accent-pink\">Creative</span> Development\n            </h2>\n            <p className=\"text-xl text-github-text-secondary max-w-3xl mx-auto\">\n              Experience the future of coding and music creation with our comprehensive suite of AI-powered tools\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"bg-github-secondary border-github-border hover:border-accent-purple/50 transition-all duration-300 hover:shadow-xl\">\n                <CardContent className=\"p-8\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className={`w-14 h-14 bg-gradient-to-br from-accent-${feature.color} to-accent-${feature.color}/70 rounded-xl flex items-center justify-center mr-4`}>\n                      <feature.icon className=\"text-white h-6 w-6\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-semibold\">{feature.title}</h3>\n                      <p className=\"text-github-text-secondary text-sm\">AI-powered</p>\n                    </div>\n                  </div>\n                  <p className=\"text-github-text-secondary mb-6\">{feature.description}</p>\n                  <Link href={`/${feature.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                      Try Now\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Interactive Demo */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              Experience the <span className=\"accent-cyan\">Switch</span>\n            </h2>\n            <p className=\"text-xl text-github-text-secondary max-w-3xl mx-auto\">\n              See how CodedSwitch seamlessly transforms between coding and music creation modes\n            </p>\n          </div>\n\n          {/* Demo Interface */}\n          <Card className=\"bg-github-secondary border-github-border overflow-hidden shadow-2xl\">\n            {/* Demo Header */}\n            <div className=\"bg-github-dark border-b border-github-border p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                  </div>\n                  <span className=\"text-github-text-secondary text-sm font-mono\">codedswitch-demo.js</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button size=\"sm\" variant=\"outline\" className=\"border-accent-purple/30 text-accent-purple hover:bg-accent-purple/20\">\n                    <Code className=\"mr-1 h-3 w-3\" />\n                    Code Mode\n                  </Button>\n                  <span className=\"text-github-text-secondary\">‚áÑ</span>\n                  <Button size=\"sm\" variant=\"outline\" className=\"border-accent-pink/30 text-accent-pink hover:bg-accent-pink/20\">\n                    <Music className=\"mr-1 h-3 w-3\" />\n                    Music Mode\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Demo Content */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2\">\n              {/* Code Panel */}\n              <div className=\"p-6 border-r border-github-border\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-lg font-semibold accent-purple mb-2 flex items-center\">\n                    <Code className=\"mr-2 h-5 w-5\" />\n                    Code Input\n                  </h3>\n                </div>\n                <CodeEditor\n                  code={sampleCode}\n                  language=\"javascript\"\n                  readOnly\n                  className=\"h-64\"\n                />\n              </div>\n\n              {/* Music Panel */}\n              <div className=\"p-6\">\n                <div className=\"mb-4\">\n                  <h3 className=\"text-lg font-semibold accent-pink mb-2 flex items-center\">\n                    <Music className=\"mr-2 h-5 w-5\" />\n                    Music Output\n                  </h3>\n                </div>\n                <Card className=\"bg-github-dark border-github-border h-64\">\n                  <CardContent className=\"p-4 h-full flex flex-col\">\n                    <AudioVisualizer \n                      className=\"flex-1 mb-4\" \n                      isPlaying={isPlaying}\n                    />\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Button\n                          size=\"sm\"\n                          className=\"w-10 h-10 bg-accent-pink/20 hover:bg-accent-pink/30 rounded-full p-0\"\n                          onClick={() => setIsPlaying(!isPlaying)}\n                        >\n                          <Play className=\"text-accent-pink h-4 w-4\" />\n                        </Button>\n                        <div className=\"text-sm\">\n                          <div className=\"text-white\">Generated Melody</div>\n                          <div className=\"text-github-text-secondary text-xs\">120 BPM ‚Ä¢ C Major</div>\n                        </div>\n                      </div>\n                      <div className=\"text-xs text-github-text-secondary\">\n                        üéµ Algorithm-driven composition\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Demo Status */}\n            <div className=\"bg-github-dark border-t border-github-border p-4\">\n              <div className=\"flex items-center justify-center space-x-6 text-sm\">\n                <div className=\"flex items-center accent-purple\">\n                  <div className=\"w-2 h-2 bg-accent-purple rounded-full mr-2 animate-pulse\"></div>\n                  Code Analysis: Complete\n                </div>\n                <div className=\"flex items-center accent-cyan\">\n                  <div className=\"w-2 h-2 bg-accent-cyan rounded-full mr-2 animate-pulse\"></div>\n                  AI Processing: Active\n                </div>\n                <div className=\"flex items-center accent-pink\">\n                  <div className=\"w-2 h-2 bg-accent-pink rounded-full mr-2 animate-pulse\"></div>\n                  Music Generation: Ready\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      {/* Tech Stack */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-github-secondary/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              Built with <span className=\"accent-cyan\">Modern</span> Technology\n            </h2>\n            <p className=\"text-xl text-github-text-secondary max-w-3xl mx-auto\">\n              Powered by cutting-edge tools and frameworks for optimal performance and scalability\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8\">\n            {techStack.map((tech, index) => (\n              <div key={index} className=\"flex flex-col items-center group\">\n                <div className=\"w-16 h-16 bg-github-secondary border border-github-border rounded-xl flex items-center justify-center mb-3 group-hover:border-accent-cyan transition-colors\">\n                  <span className=\"text-2xl\">{tech.icon}</span>\n                </div>\n                <span className=\"text-sm font-medium\">{tech.name}</span>\n              </div>\n            ))}\n          </div>\n\n          {/* GitHub Stats */}\n          <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold accent-purple mb-2\">137+</div>\n              <div className=\"text-github-text-secondary\">Commits</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold accent-pink mb-2\">8</div>\n              <div className=\"text-github-text-secondary\">Core Features</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold accent-cyan mb-2\">24/7</div>\n              <div className=\"text-github-text-secondary\">AI Availability</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/10 via-cyan-500/5 to-pink-500/10\"></div>\n        \n        <div className=\"max-w-4xl mx-auto text-center relative\">\n          <h2 className=\"text-4xl md:text-6xl font-bold mb-6\">\n            Ready to <span className=\"text-gradient-full\">Switch</span>?\n          </h2>\n          <p className=\"text-xl text-github-text-secondary mb-12 max-w-2xl mx-auto\">\n            Join thousands of developers and musicians who are already creating with CodedSwitch\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row items-center justify-center gap-6 mb-12\">\n            <Link href=\"/dashboard\">\n              <Button className=\"w-full sm:w-auto px-8 py-4 bg-gradient-purple-pink text-white font-semibold text-lg hover:scale-105 transition-transform shadow-lg\">\n                <Rocket className=\"mr-2 h-5 w-5\" />\n                Start Creating Now\n              </Button>\n            </Link>\n            <Button \n              variant=\"outline\" \n              className=\"w-full sm:w-auto px-8 py-4 border-github-border hover:border-accent-cyan transition-colors\"\n              asChild\n            >\n              <a href=\"https://github.com/asume21/Codedswitch-minimal\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Github className=\"mr-2 h-5 w-5\" />\n                Fork on GitHub\n              </a>\n            </Button>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-8 text-github-text-secondary\">\n            <a href=\"mailto:servicehelp@codedswitch.com\" className=\"flex items-center hover:text-accent-cyan transition-colors\">\n              <span className=\"mr-2\">‚úâÔ∏è</span>\n              servicehelp@codedswitch.com\n            </a>\n            <a href=\"https://github.com/asume21\" className=\"flex items-center hover:text-accent-purple transition-colors\">\n              <Github className=\"mr-2 h-4 w-4\" />\n              @asume21\n            </a>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":16832},"client/src/pages/lyric-lab.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { FileText, Loader2, Music, Sparkles, BarChart3 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { lyricsAPI } from \"@/lib/api\";\nimport { AIProviderSelector } from \"@/components/ui/ai-provider-selector\";\n\nconst MUSIC_GENRES = [\n  \"Hip-Hop\", \"Pop\", \"Rock\", \"R&B\", \"Country\", \"Jazz\", \"Blues\", \"Folk\", \n  \"Electronic\", \"Rap\", \"Alternative\", \"Indie\", \"Classical\", \"Reggae\"\n];\n\nconst MOODS = [\n  \"Happy\", \"Sad\", \"Energetic\", \"Romantic\", \"Angry\", \"Peaceful\", \"Mysterious\", \n  \"Nostalgic\", \"Hopeful\", \"Melancholic\", \"Confident\", \"Dreamy\"\n];\n\nexport default function LyricLab() {\n  const [prompt, setPrompt] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [mood, setMood] = useState(\"\");\n  const [generatedLyrics, setGeneratedLyrics] = useState(\"\");\n  const [rhymeScheme, setRhymeScheme] = useState(\"\");\n  const [sentiment, setSentiment] = useState(\"\");\n  const [analysisLyrics, setAnalysisLyrics] = useState(\"\");\n  const [analysis, setAnalysis] = useState<any>(null);\n  const [aiProvider, setAiProvider] = useState(\"grok\");\n  const { toast } = useToast();\n\n  const generateMutation = useMutation({\n    mutationFn: lyricsAPI.generate,\n    onSuccess: (data) => {\n      setGeneratedLyrics(data.lyrics);\n      setRhymeScheme(data.rhymeScheme);\n      setSentiment(data.sentiment);\n      toast({\n        title: \"Lyrics generated!\",\n        description: \"Your AI-powered lyrics are ready\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const analyzeMutation = useMutation({\n    mutationFn: lyricsAPI.analyze,\n    onSuccess: (data) => {\n      setAnalysis(data);\n      toast({\n        title: \"Analysis complete!\",\n        description: \"Lyric analysis results are ready\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    if (!prompt.trim()) {\n      toast({\n        title: \"No prompt provided\",\n        description: \"Please enter a topic or theme for your lyrics\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateMutation.mutate({\n      prompt,\n      genre: genre || undefined,\n      mood: mood || undefined,\n      aiProvider\n    });\n  };\n\n  const handleAnalyze = () => {\n    if (!analysisLyrics.trim()) {\n      toast({\n        title: \"No lyrics provided\",\n        description: \"Please enter some lyrics to analyze\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    analyzeMutation.mutate({\n      lyrics: analysisLyrics,\n      aiProvider\n    });\n  };\n\n  const examplePrompts = [\n    \"A song about overcoming challenges in coding\",\n    \"Love story between two developers\",\n    \"The frustration of debugging late at night\",\n    \"Celebrating a successful product launch\",\n    \"The journey of learning a new programming language\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-accent-pink/20 rounded-lg flex items-center justify-center mr-4\">\n                <FileText className=\"text-accent-pink h-6 w-6\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold\">Lyric Lab</h1>\n                <p className=\"text-github-text-secondary\">\n                  Generate creative song lyrics and analyze their patterns with AI\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\">AI-Generated</Badge>\n              <Badge variant=\"secondary\">Multiple Genres</Badge>\n              <Badge variant=\"secondary\">Rhyme Analysis</Badge>\n            </div>\n          </div>\n\n          <Tabs defaultValue=\"generate\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"generate\" className=\"flex items-center\">\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                Generate Lyrics\n              </TabsTrigger>\n              <TabsTrigger value=\"analyze\" className=\"flex items-center\">\n                <BarChart3 className=\"mr-2 h-4 w-4\" />\n                Analyze Lyrics\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"generate\">\n              {/* Generation Parameters */}\n              <Card className=\"bg-github-secondary border-github-border mb-6\">\n                <CardHeader>\n                  <CardTitle>Generation Parameters</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Topic/Theme</label>\n                    <Input\n                      value={prompt}\n                      onChange={(e) => setPrompt(e.target.value)}\n                      placeholder=\"What should the song be about?\"\n                      className=\"bg-github-dark border-github-border\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Genre (Optional)</label>\n                      <Select value={genre} onValueChange={setGenre}>\n                        <SelectTrigger className=\"bg-github-dark border-github-border\">\n                          <SelectValue placeholder=\"Select genre\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {MUSIC_GENRES.map((g) => (\n                            <SelectItem key={g} value={g}>\n                              {g}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">Mood (Optional)</label>\n                      <Select value={mood} onValueChange={setMood}>\n                        <SelectTrigger className=\"bg-github-dark border-github-border\">\n                          <SelectValue placeholder=\"Select mood\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {MOODS.map((m) => (\n                            <SelectItem key={m} value={m}>\n                              {m}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <label className=\"text-sm font-medium mb-2 block\">AI Provider</label>\n                      <AIProviderSelector\n                        value={aiProvider}\n                        onValueChange={setAiProvider}\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Example Prompts</label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {examplePrompts.map((example, index) => (\n                        <Button\n                          key={index}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => setPrompt(example)}\n                          className=\"text-xs\"\n                        >\n                          {example}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <Button\n                    onClick={handleGenerate}\n                    disabled={generateMutation.isPending}\n                    className=\"w-full bg-gradient-to-r from-accent-pink to-accent-purple\"\n                  >\n                    {generateMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Generating Lyrics...\n                      </>\n                    ) : (\n                      <>\n                        <Sparkles className=\"mr-2 h-4 w-4\" />\n                        Generate Lyrics\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Generated Lyrics */}\n              {generatedLyrics && (\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  <div className=\"lg:col-span-2\">\n                    <Card className=\"bg-github-secondary border-github-border\">\n                      <CardHeader>\n                        <CardTitle>Generated Lyrics</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <Textarea\n                          value={generatedLyrics}\n                          onChange={(e) => setGeneratedLyrics(e.target.value)}\n                          className=\"min-h-96 bg-github-dark border-github-border resize-none font-mono\"\n                          placeholder=\"Your generated lyrics will appear here...\"\n                        />\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <Card className=\"bg-github-secondary border-github-border\">\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Rhyme Scheme</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <Badge variant=\"outline\" className=\"text-accent-cyan\">\n                          {rhymeScheme}\n                        </Badge>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-github-secondary border-github-border\">\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Sentiment</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <Badge \n                          variant=\"outline\" \n                          className={\n                            sentiment.toLowerCase().includes('positive') ? 'text-green-500' :\n                            sentiment.toLowerCase().includes('negative') ? 'text-red-500' :\n                            'text-yellow-500'\n                          }\n                        >\n                          {sentiment}\n                        </Badge>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-accent-pink/10 border-accent-pink/20\">\n                      <CardHeader>\n                        <CardTitle className=\"text-sm text-accent-pink\">üí° Tips</CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <ul className=\"space-y-1 text-xs\">\n                          <li>‚Ä¢ Edit generated lyrics to match your style</li>\n                          <li>‚Ä¢ Try different genres for variety</li>\n                          <li>‚Ä¢ Use specific prompts for better results</li>\n                        </ul>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"analyze\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Analysis Input */}\n                <Card className=\"bg-github-secondary border-github-border\">\n                  <CardHeader>\n                    <CardTitle>Lyrics to Analyze</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <Textarea\n                      value={analysisLyrics}\n                      onChange={(e) => setAnalysisLyrics(e.target.value)}\n                      placeholder=\"Paste your lyrics here for analysis...\"\n                      className=\"min-h-64 bg-github-dark border-github-border resize-none\"\n                    />\n                    <Button\n                      onClick={handleAnalyze}\n                      disabled={analyzeMutation.isPending}\n                      className=\"w-full mt-4 bg-gradient-to-r from-accent-cyan to-accent-purple\"\n                    >\n                      {analyzeMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Analyzing...\n                        </>\n                      ) : (\n                        <>\n                          <BarChart3 className=\"mr-2 h-4 w-4\" />\n                          Analyze Lyrics\n                        </>\n                      )}\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Analysis Results */}\n                <div className=\"space-y-4\">\n                  {analysis ? (\n                    <>\n                      <Card className=\"bg-github-secondary border-github-border\">\n                        <CardHeader>\n                          <CardTitle className=\"text-sm\">Sentiment Analysis</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <Badge \n                            variant=\"outline\" \n                            className={\n                              analysis.sentiment.toLowerCase().includes('positive') ? 'text-green-500' :\n                              analysis.sentiment.toLowerCase().includes('negative') ? 'text-red-500' :\n                              'text-yellow-500'\n                            }\n                          >\n                            {analysis.sentiment}\n                          </Badge>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"bg-github-secondary border-github-border\">\n                        <CardHeader>\n                          <CardTitle className=\"text-sm\">Themes</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {analysis.themes.map((theme: string, index: number) => (\n                              <Badge key={index} variant=\"secondary\">\n                                {theme}\n                              </Badge>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"bg-github-secondary border-github-border\">\n                        <CardHeader>\n                          <CardTitle className=\"text-sm\">Rhyme Scheme</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <Badge variant=\"outline\" className=\"text-accent-cyan\">\n                            {analysis.rhymeScheme}\n                          </Badge>\n                        </CardContent>\n                      </Card>\n\n                      <Card className=\"bg-github-secondary border-github-border\">\n                        <CardHeader>\n                          <CardTitle className=\"text-sm\">Complexity Score</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex-1 bg-github-dark rounded-full h-2\">\n                              <div \n                                className=\"bg-gradient-to-r from-accent-purple to-accent-pink h-2 rounded-full\"\n                                style={{ width: `${(analysis.complexity / 10) * 100}%` }}\n                              ></div>\n                            </div>\n                            <span className=\"text-sm font-medium\">{analysis.complexity}/10</span>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </>\n                  ) : (\n                    <Card className=\"bg-github-secondary border-github-border\">\n                      <CardContent className=\"p-8 text-center text-github-text-secondary\">\n                        Analysis results will appear here\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17414},"client/src/pages/music-studio.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Music, \n  Play, \n  Pause, \n  Square, \n  Download, \n  Save, \n  Volume2, \n  Plus,\n  Minus,\n  FileText,\n  Headphones,\n  Mic\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { lyricsAPI, beatAPI } from \"@/lib/api\";\nimport { audioManager } from \"@/lib/audio\";\nimport { Waveform } from \"@/components/ui/waveform\";\nimport { AudioVisualizer } from \"@/components/ui/audio-visualizer\";\n\ninterface Track {\n  id: string;\n  name: string;\n  type: 'melody' | 'beat' | 'lyrics' | 'vocals';\n  content: any;\n  volume: number;\n  muted: boolean;\n  solo: boolean;\n}\n\nconst KEYS = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\nconst SCALES = ['Major', 'Minor', 'Dorian', 'Mixolydian', 'Pentatonic'];\n\nexport default function MusicStudio() {\n  const [projectName, setProjectName] = useState(\"Untitled Song\");\n  const [key, setKey] = useState(\"C\");\n  const [scale, setScale] = useState(\"Major\");\n  const [tempo, setTempo] = useState([120]);\n  const [tracks, setTracks] = useState<Track[]>([\n    {\n      id: '1',\n      name: 'Main Melody',\n      type: 'melody',\n      content: null,\n      volume: 75,\n      muted: false,\n      solo: false\n    },\n    {\n      id: '2',\n      name: 'Beat',\n      type: 'beat',\n      content: null,\n      volume: 80,\n      muted: false,\n      solo: false\n    },\n    {\n      id: '3',\n      name: 'Lyrics',\n      type: 'lyrics',\n      content: '',\n      volume: 70,\n      muted: false,\n      solo: false\n    }\n  ]);\n  const [selectedTrack, setSelectedTrack] = useState('1');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [lyricsPrompt, setLyricsPrompt] = useState(\"\");\n  const [beatGenre, setBeatGenre] = useState(\"\");\n  const { toast } = useToast();\n\n  const generateLyricsMutation = useMutation({\n    mutationFn: lyricsAPI.generate,\n    onSuccess: (data) => {\n      updateTrackContent('3', data.lyrics);\n      toast({\n        title: \"Lyrics generated!\",\n        description: \"AI-powered lyrics have been added to your track\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateBeatMutation = useMutation({\n    mutationFn: beatAPI.generate,\n    onSuccess: (data) => {\n      updateTrackContent('2', data);\n      toast({\n        title: \"Beat generated!\",\n        description: \"A new beat has been added to your track\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Generation failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTrackContent = (trackId: string, content: any) => {\n    setTracks(tracks.map(track => \n      track.id === trackId ? { ...track, content } : track\n    ));\n  };\n\n  const updateTrackVolume = (trackId: string, volume: number) => {\n    setTracks(tracks.map(track => \n      track.id === trackId ? { ...track, volume } : track\n    ));\n  };\n\n  const toggleMute = (trackId: string) => {\n    setTracks(tracks.map(track => \n      track.id === trackId ? { ...track, muted: !track.muted } : track\n    ));\n  };\n\n  const toggleSolo = (trackId: string) => {\n    setTracks(tracks.map(track => \n      track.id === trackId ? { ...track, solo: !track.solo } : track\n    ));\n  };\n\n  const addTrack = (type: Track['type']) => {\n    const newTrack: Track = {\n      id: Date.now().toString(),\n      name: `${type.charAt(0).toUpperCase() + type.slice(1)} ${tracks.length + 1}`,\n      type,\n      content: type === 'lyrics' ? '' : null,\n      volume: 75,\n      muted: false,\n      solo: false\n    };\n    setTracks([...tracks, newTrack]);\n  };\n\n  const removeTrack = (trackId: string) => {\n    setTracks(tracks.filter(track => track.id !== trackId));\n  };\n\n  const handlePlay = async () => {\n    if (isPlaying) {\n      audioManager.stop();\n      setIsPlaying(false);\n    } else {\n      // Play the beat track if available\n      const beatTrack = tracks.find(t => t.type === 'beat' && t.content && !t.muted);\n      if (beatTrack?.content) {\n        try {\n          await audioManager.playBeat(beatTrack.content.pattern, beatTrack.content.samples, tempo[0]);\n          setIsPlaying(true);\n        } catch (error) {\n          toast({\n            title: \"Playback failed\",\n            description: \"Could not play the composition\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        toast({\n          title: \"No playable content\",\n          description: \"Add a beat track to play your composition\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const generateLyrics = () => {\n    if (!lyricsPrompt.trim()) {\n      toast({\n        title: \"No prompt provided\",\n        description: \"Please enter a topic for your lyrics\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateLyricsMutation.mutate({\n      prompt: lyricsPrompt,\n    });\n  };\n\n  const generateBeat = () => {\n    if (!beatGenre) {\n      toast({\n        title: \"No genre selected\",\n        description: \"Please select a genre for your beat\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateBeatMutation.mutate({\n      genre: beatGenre,\n      bpm: tempo[0],\n      duration: 16,\n    });\n  };\n\n  const selectedTrackData = tracks.find(t => t.id === selectedTrack);\n\n  return (\n    <div className=\"min-h-screen bg-github-dark text-github-text pt-16\">\n      <div className=\"flex\">\n        <div className=\"flex-1 ml-64 p-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-accent-pink/20 rounded-lg flex items-center justify-center mr-4\">\n                  <Music className=\"text-accent-pink h-6 w-6\" />\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold\">Music Studio</h1>\n                  <p className=\"text-github-text-secondary\">\n                    Compose complete songs with AI collaboration\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\">\n                  <Save className=\"mr-2 h-4 w-4\" />\n                  Save Project\n                </Button>\n                <Button>\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-wrap gap-2\">\n              <Badge variant=\"secondary\">Multi-track</Badge>\n              <Badge variant=\"secondary\">AI Collaboration</Badge>\n              <Badge variant=\"secondary\">Real-time Mixing</Badge>\n            </div>\n          </div>\n\n          {/* Project Settings */}\n          <Card className=\"bg-github-secondary border-github-border mb-6\">\n            <CardHeader>\n              <CardTitle>Project Settings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Project Name</label>\n                  <Input\n                    value={projectName}\n                    onChange={(e) => setProjectName(e.target.value)}\n                    className=\"bg-github-dark border-github-border\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Key</label>\n                  <Select value={key} onValueChange={setKey}>\n                    <SelectTrigger className=\"bg-github-dark border-github-border\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {KEYS.map((k) => (\n                        <SelectItem key={k} value={k}>{k}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Scale</label>\n                  <Select value={scale} onValueChange={setScale}>\n                    <SelectTrigger className=\"bg-github-dark border-github-border\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {SCALES.map((s) => (\n                        <SelectItem key={s} value={s}>{s}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">\n                    Tempo: {tempo[0]} BPM\n                  </label>\n                  <Slider\n                    value={tempo}\n                    onValueChange={setTempo}\n                    max={200}\n                    min={60}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Track Mixer */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Track Mixer</CardTitle>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        onClick={handlePlay}\n                        className=\"bg-accent-pink/20 hover:bg-accent-pink/30\"\n                      >\n                        {isPlaying ? <Pause className=\"h-4 w-4\" /> : <Play className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button\n                        onClick={() => {\n                          audioManager.stop();\n                          setIsPlaying(false);\n                        }}\n                        variant=\"outline\"\n                        size=\"sm\"\n                      >\n                        <Square className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {tracks.map((track) => (\n                      <div\n                        key={track.id}\n                        className={`p-4 rounded-lg border-2 transition-colors cursor-pointer ${\n                          selectedTrack === track.id \n                            ? 'border-accent-pink bg-accent-pink/10' \n                            : 'border-github-border bg-github-dark'\n                        }`}\n                        onClick={() => setSelectedTrack(track.id)}\n                      >\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                              track.type === 'melody' ? 'bg-accent-purple/20' :\n                              track.type === 'beat' ? 'bg-accent-cyan/20' :\n                              track.type === 'lyrics' ? 'bg-accent-pink/20' :\n                              'bg-accent-purple/20'\n                            }`}>\n                              {track.type === 'melody' && <Music className=\"h-4 w-4\" />}\n                              {track.type === 'beat' && <Headphones className=\"h-4 w-4\" />}\n                              {track.type === 'lyrics' && <FileText className=\"h-4 w-4\" />}\n                              {track.type === 'vocals' && <Mic className=\"h-4 w-4\" />}\n                            </div>\n                            <span className=\"font-medium\">{track.name}</span>\n                            {track.content && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">Active</Badge>\n                            )}\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              variant={track.muted ? \"default\" : \"outline\"}\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                toggleMute(track.id);\n                              }}\n                              className=\"text-xs px-2\"\n                            >\n                              {track.muted ? \"M\" : \"M\"}\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant={track.solo ? \"default\" : \"outline\"}\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                toggleSolo(track.id);\n                              }}\n                              className=\"text-xs px-2\"\n                            >\n                              S\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                removeTrack(track.id);\n                              }}\n                              className=\"text-xs px-2\"\n                            >\n                              <Minus className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4\">\n                          <Volume2 className=\"h-4 w-4 text-github-text-secondary\" />\n                          <Slider\n                            value={[track.volume]}\n                            onValueChange={(value) => updateTrackVolume(track.id, value[0])}\n                            max={100}\n                            min={0}\n                            className=\"flex-1\"\n                          />\n                          <span className=\"text-sm text-github-text-secondary w-8\">\n                            {track.volume}\n                          </span>\n                        </div>\n\n                        {track.type === 'beat' && track.content && (\n                          <div className=\"mt-2\">\n                            <Waveform className=\"h-8\" bars={16} color=\"cyan\" />\n                          </div>\n                        )}\n                      </div>\n                    ))}\n\n                    <Separator />\n\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => addTrack('melody')}\n                        className=\"flex-1\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Add Melody\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => addTrack('beat')}\n                        className=\"flex-1\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Add Beat\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => addTrack('lyrics')}\n                        className=\"flex-1\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Add Lyrics\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Track Editor */}\n            <div>\n              <Card className=\"bg-github-secondary border-github-border\">\n                <CardHeader>\n                  <CardTitle>\n                    {selectedTrackData ? `Edit ${selectedTrackData.name}` : 'Select a Track'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {selectedTrackData ? (\n                    <div className=\"space-y-4\">\n                      {selectedTrackData.type === 'lyrics' && (\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label className=\"text-sm font-medium mb-2 block\">Lyrics Prompt</label>\n                            <Input\n                              value={lyricsPrompt}\n                              onChange={(e) => setLyricsPrompt(e.target.value)}\n                              placeholder=\"Describe your song theme...\"\n                              className=\"bg-github-dark border-github-border\"\n                            />\n                          </div>\n                          <Button\n                            onClick={generateLyrics}\n                            disabled={generateLyricsMutation.isPending}\n                            className=\"w-full bg-gradient-to-r from-accent-pink to-accent-purple\"\n                            size=\"sm\"\n                          >\n                            Generate Lyrics\n                          </Button>\n                          {selectedTrackData.content && (\n                            <Textarea\n                              value={selectedTrackData.content}\n                              onChange={(e) => updateTrackContent(selectedTrackData.id, e.target.value)}\n                              className=\"min-h-32 bg-github-dark border-github-border resize-none text-sm\"\n                              placeholder=\"Lyrics will appear here...\"\n                            />\n                          )}\n                        </div>\n                      )}\n\n                      {selectedTrackData.type === 'beat' && (\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label className=\"text-sm font-medium mb-2 block\">Beat Genre</label>\n                            <Select value={beatGenre} onValueChange={setBeatGenre}>\n                              <SelectTrigger className=\"bg-github-dark border-github-border\">\n                                <SelectValue placeholder=\"Select genre\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"Hip-Hop\">Hip-Hop</SelectItem>\n                                <SelectItem value=\"Electronic\">Electronic</SelectItem>\n                                <SelectItem value=\"Pop\">Pop</SelectItem>\n                                <SelectItem value=\"Rock\">Rock</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <Button\n                            onClick={generateBeat}\n                            disabled={generateBeatMutation.isPending}\n                            className=\"w-full bg-gradient-to-r from-accent-cyan to-accent-purple\"\n                            size=\"sm\"\n                          >\n                            Generate Beat\n                          </Button>\n                          {selectedTrackData.content && (\n                            <div className=\"space-y-2\">\n                              <p className=\"text-sm font-medium\">Beat Pattern</p>\n                              <div className=\"grid grid-cols-8 gap-1\">\n                                {selectedTrackData.content.pattern?.slice(0, 16).map((beat: number, index: number) => (\n                                  <div\n                                    key={index}\n                                    className={`w-6 h-6 rounded border-2 flex items-center justify-center text-xs ${\n                                      beat ? 'bg-accent-cyan border-accent-cyan' : 'border-github-border'\n                                    }`}\n                                  >\n                                    {beat ? '‚óè' : '‚óã'}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      )}\n\n                      {selectedTrackData.type === 'melody' && (\n                        <div className=\"space-y-4\">\n                          <p className=\"text-sm text-github-text-secondary\">\n                            Melody editing tools coming soon. Use the CodeBeat Studio to convert code into melodies.\n                          </p>\n                          <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                            Import from CodeBeat\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <p className=\"text-github-text-secondary text-sm\">\n                      Select a track from the mixer to edit its content\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22281},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/layout/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Code, Music, Zap, Menu, X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/\", label: \"Home\", icon: null },\n    { href: \"/code-translator\", label: \"Code Translator\", icon: Code },\n    { href: \"/lyric-lab\", label: \"Lyric Lab\", icon: Music },\n    { href: \"/beat-studio\", label: \"Beat Studio\", icon: Music },\n    { href: \"/music-studio\", label: \"Music Studio\", icon: Music },\n    { href: \"/codebeat-studio\", label: \"CodeBeat\", icon: Zap },\n    { href: \"/ai-assistant\", label: \"AI Assistant\", icon: null },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === \"/\";\n    return location.startsWith(href);\n  };\n\n  return (\n    <nav className=\"fixed top-0 w-full bg-github-dark/80 backdrop-blur-md border-b border-github-border z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo and Brand */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 bg-gradient-purple-pink rounded-lg flex items-center justify-center\">\n                <Code className=\"text-white h-5 w-5\" />\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-6 h-6 bg-gradient-to-br from-accent-cyan to-accent-pink rounded-full flex items-center justify-center\">\n                <Music className=\"text-white h-3 w-3\" />\n              </div>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold\">\n                <span className=\"accent-purple\">Coded</span>\n                <span className=\"accent-pink\">Switch</span>\n              </h1>\n              <p className=\"text-xs text-github-text-secondary font-mono\">Where Code Meets Music</p>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.slice(1, -1).map((item) => (\n              <Link key={item.href} href={item.href}>\n                <span className={cn(\n                  \"text-sm transition-colors hover:text-github-text\",\n                  isActive(item.href) ? \"text-github-text\" : \"text-github-text-secondary\"\n                )}>\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n          </div>\n\n          {/* CTA Buttons */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Link href=\"/ai-assistant\">\n              <Button variant=\"ghost\" size=\"sm\">\n                AI Assistant\n              </Button>\n            </Link>\n            <Link href=\"/dashboard\">\n              <Button className=\"bg-gradient-purple-pink hover:opacity-90\">\n                Dashboard\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"md:hidden\"\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n          >\n            {isMobileMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n          </Button>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-github-border\">\n            <div className=\"space-y-2\">\n              {navItems.map((item) => (\n                <Link key={item.href} href={item.href}>\n                  <div \n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                      isActive(item.href) \n                        ? \"bg-github-secondary text-github-text\" \n                        : \"text-github-text-secondary hover:text-github-text hover:bg-github-secondary/50\"\n                    )}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    {item.icon && <item.icon className=\"h-4 w-4\" />}\n                    <span className=\"text-sm\">{item.label}</span>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":4493},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Code, \n  Music, \n  Zap, \n  Bot, \n  BarChart3, \n  Settings,\n  Home,\n  FileText,\n  Headphones\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  const sidebarItems = [\n    { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n    { href: \"/code-translator\", label: \"Code Translator\", icon: Code },\n    { href: \"/lyric-lab\", label: \"Lyric Lab\", icon: FileText },\n    { href: \"/beat-studio\", label: \"Beat Studio\", icon: Headphones },\n    { href: \"/music-studio\", label: \"Music Studio\", icon: Music },\n    { href: \"/codebeat-studio\", label: \"CodeBeat Studio\", icon: Zap },\n    { href: \"/ai-assistant\", label: \"AI Assistant\", icon: Bot },\n    { href: \"/analytics\", label: \"Analytics\", icon: BarChart3 },\n    { href: \"/settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  const isActive = (href: string) => {\n    return location === href || (href !== \"/dashboard\" && location.startsWith(href));\n  };\n\n  return (\n    <div className=\"fixed left-0 top-16 h-[calc(100vh-4rem)] w-64 bg-github-secondary border-r border-github-border\">\n      <div className=\"p-4\">\n        <div className=\"space-y-2\">\n          {sidebarItems.map((item) => (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  \"w-full justify-start text-left\",\n                  isActive(item.href) \n                    ? \"bg-github-dark text-github-text\" \n                    : \"text-github-text-secondary hover:text-github-text hover:bg-github-dark/50\"\n                )}\n              >\n                <item.icon className=\"mr-3 h-4 w-4\" />\n                {item.label}\n              </Button>\n            </Link>\n          ))}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-8 pt-4 border-t border-github-border\">\n          <h3 className=\"text-sm font-medium text-github-text-secondary mb-3\">Quick Actions</h3>\n          <div className=\"space-y-2\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n              <Code className=\"mr-2 h-3 w-3\" />\n              New Translation\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n              <Music className=\"mr-2 h-3 w-3\" />\n              Generate Beat\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\">\n              <Zap className=\"mr-2 h-3 w-3\" />\n              Code to Music\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2723},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/ai-provider-selector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Bot, Sparkles, Zap } from \"lucide-react\";\n\ninterface AIProvider {\n  id: string;\n  name: string;\n  description: string;\n  features: string[];\n  available: boolean;\n}\n\ninterface AIProviderSelectorProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  className?: string;\n}\n\nexport function AIProviderSelector({ value, onValueChange, className }: AIProviderSelectorProps) {\n  const { data: providers = [] } = useQuery<AIProvider[]>({\n    queryKey: [\"/api/ai/providers\"],\n  });\n\n  const availableProviders = providers.filter(p => p.available);\n  \n  // Set default to first available provider if current value is not available\n  useEffect(() => {\n    if (availableProviders.length > 0 && !availableProviders.some(p => p.id === value)) {\n      onValueChange(availableProviders[0].id);\n    }\n  }, [availableProviders, value, onValueChange]);\n\n  const getProviderIcon = (id: string) => {\n    switch (id) {\n      case \"gemini\":\n        return <Sparkles className=\"h-4 w-4\" />;\n      case \"grok\":\n        return <Zap className=\"h-4 w-4\" />;\n      default:\n        return <Zap className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getProviderColor = (id: string) => {\n    switch (id) {\n      case \"gemini\":\n        return \"text-blue-400\";\n      case \"grok\":\n        return \"text-purple-400\";\n      default:\n        return \"text-purple-400\";\n    }\n  };\n\n  if (availableProviders.length === 0) {\n    return (\n      <div className=\"flex items-center space-x-2 text-sm text-github-text-secondary\">\n        <Bot className=\"h-4 w-4\" />\n        <span>No AI providers available</span>\n      </div>\n    );\n  }\n\n  return (\n    <Select value={value} onValueChange={onValueChange}>\n      <SelectTrigger className={`w-48 ${className}`}>\n        <SelectValue>\n          {availableProviders.find(p => p.id === value) && (\n            <div className=\"flex items-center space-x-2\">\n              <span className={getProviderColor(value)}>\n                {getProviderIcon(value)}\n              </span>\n              <span>{availableProviders.find(p => p.id === value)?.name}</span>\n            </div>\n          )}\n        </SelectValue>\n      </SelectTrigger>\n      <SelectContent>\n        {availableProviders.map((provider) => (\n          <SelectItem key={provider.id} value={provider.id}>\n            <div className=\"flex flex-col space-y-1\">\n              <div className=\"flex items-center space-x-2\">\n                <span className={getProviderColor(provider.id)}>\n                  {getProviderIcon(provider.id)}\n                </span>\n                <span className=\"font-medium\">{provider.name}</span>\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Available\n                </Badge>\n              </div>\n              <p className=\"text-xs text-github-text-secondary max-w-64\">\n                {provider.description}\n              </p>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}","size_bytes":3209},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/audio-visualizer.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AudioVisualizerProps {\n  className?: string;\n  isPlaying?: boolean;\n  data?: number[];\n}\n\nexport function AudioVisualizer({ \n  className, \n  isPlaying = false,\n  data = [] \n}: AudioVisualizerProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationRef = useRef<number>();\n  const [visualData, setVisualData] = useState<number[]>(\n    Array.from({ length: 64 }, () => Math.random() * 100)\n  );\n\n  useEffect(() => {\n    if (!isPlaying) {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n      return;\n    }\n\n    const animate = () => {\n      setVisualData(prev => \n        prev.map(() => Math.random() * 100)\n      );\n      animationRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [isPlaying]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const { width, height } = canvas;\n    const dataToUse = data.length > 0 ? data : visualData;\n    \n    ctx.clearRect(0, 0, width, height);\n\n    const barWidth = width / dataToUse.length;\n    const gradient = ctx.createLinearGradient(0, 0, width, 0);\n    gradient.addColorStop(0, \"hsl(262, 73%, 66%)\");\n    gradient.addColorStop(0.5, \"hsl(187, 92%, 45%)\");\n    gradient.addColorStop(1, \"hsl(328, 73%, 58%)\");\n\n    ctx.fillStyle = gradient;\n\n    dataToUse.forEach((value, index) => {\n      const barHeight = (value / 100) * height * 0.8;\n      const x = index * barWidth;\n      const y = height - barHeight;\n\n      ctx.fillRect(x, y, barWidth - 1, barHeight);\n    });\n  }, [visualData, data]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={300}\n      height={100}\n      className={cn(\"bg-github-dark rounded-lg\", className)}\n    />\n  );\n}\n","size_bytes":2007},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/code-editor.tsx":{"content":"import { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Copy, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CodeEditorProps {\n  code: string;\n  language: string;\n  onChange?: (code: string) => void;\n  readOnly?: boolean;\n  className?: string;\n}\n\nexport function CodeEditor({ \n  code, \n  language, \n  onChange, \n  readOnly = false,\n  className \n}: CodeEditorProps) {\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setCopied(true);\n      toast({\n        title: \"Code copied!\",\n        description: \"The code has been copied to your clipboard.\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Failed to copy code to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const syntaxHighlight = (code: string, lang: string) => {\n    // Simple syntax highlighting for demo purposes\n    const keywords = {\n      javascript: ['function', 'const', 'let', 'var', 'if', 'else', 'for', 'while', 'return'],\n      python: ['def', 'class', 'if', 'else', 'elif', 'for', 'while', 'return', 'import'],\n      java: ['public', 'private', 'class', 'interface', 'if', 'else', 'for', 'while', 'return'],\n      typescript: ['function', 'const', 'let', 'var', 'if', 'else', 'for', 'while', 'return', 'interface', 'type']\n    };\n\n    let highlighted = code;\n    const langKeywords = keywords[lang as keyof typeof keywords] || [];\n    \n    langKeywords.forEach(keyword => {\n      const regex = new RegExp(`\\\\b${keyword}\\\\b`, 'g');\n      highlighted = highlighted.replace(regex, `<span class=\"text-accent-cyan\">${keyword}</span>`);\n    });\n\n    // Highlight strings\n    highlighted = highlighted.replace(/\"([^\"]*)\"/g, '<span class=\"text-accent-pink\">\"$1\"</span>');\n    highlighted = highlighted.replace(/'([^']*)'/g, '<span class=\"text-accent-pink\">\\'$1\\'</span>');\n\n    // Highlight comments\n    highlighted = highlighted.replace(/\\/\\/.*$/gm, '<span class=\"text-github-text-secondary\">$&</span>');\n    highlighted = highlighted.replace(/#.*$/gm, '<span class=\"text-github-text-secondary\">$&</span>');\n\n    return highlighted;\n  };\n\n  return (\n    <div className={cn(\"bg-github-dark rounded-lg border border-github-border\", className)}>\n      <div className=\"flex items-center justify-between p-3 border-b border-github-border\">\n        <span className=\"text-sm font-mono text-github-text-secondary\">{language}</span>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleCopy}\n          className=\"h-8 w-8 p-0\"\n        >\n          {copied ? (\n            <Check className=\"h-4 w-4 text-green-500\" />\n          ) : (\n            <Copy className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n      <div className=\"p-4\">\n        {readOnly ? (\n          <pre className=\"text-sm font-mono text-github-text whitespace-pre-wrap\">\n            <code dangerouslySetInnerHTML={{ __html: syntaxHighlight(code, language) }} />\n          </pre>\n        ) : (\n          <textarea\n            value={code}\n            onChange={(e) => onChange?.(e.target.value)}\n            className=\"w-full h-64 bg-transparent text-sm font-mono text-github-text resize-none outline-none\"\n            placeholder={`Enter your ${language} code here...`}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3552},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/waveform.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface WaveformProps {\n  className?: string;\n  bars?: number;\n  animated?: boolean;\n  color?: \"purple\" | \"pink\" | \"cyan\";\n}\n\nexport function Waveform({ \n  className, \n  bars = 8, \n  animated = true,\n  color = \"purple\" \n}: WaveformProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const colorClasses = {\n    purple: \"bg-accent-purple\",\n    pink: \"bg-accent-pink\", \n    cyan: \"bg-accent-cyan\"\n  };\n\n  return (\n    <div \n      ref={containerRef}\n      className={cn(\"flex items-end space-x-1\", className)}\n    >\n      {Array.from({ length: bars }, (_, i) => (\n        <div\n          key={i}\n          className={cn(\n            \"w-1 rounded-full transition-all duration-300\",\n            colorClasses[color],\n            animated && \"animate-waveform\"\n          )}\n          style={{\n            height: `${Math.random() * 60 + 20}%`,\n            animationDelay: animated ? `${i * 0.1}s` : \"0s\"\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1040}}}